/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 4.25.1
 * source: evmos/feesplit/v1/tx.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../../google/api/annotations";
import * as dependency_2 from "./../../../gogoproto/gogo";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace evmos.feesplit.v1 {
    export class MsgRegisterFeeSplit extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            contract_address?: string;
            deployer_address?: string;
            withdrawer_address?: string;
            nonces?: number[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [4], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("contract_address" in data && data.contract_address != undefined) {
                    this.contract_address = data.contract_address;
                }
                if ("deployer_address" in data && data.deployer_address != undefined) {
                    this.deployer_address = data.deployer_address;
                }
                if ("withdrawer_address" in data && data.withdrawer_address != undefined) {
                    this.withdrawer_address = data.withdrawer_address;
                }
                if ("nonces" in data && data.nonces != undefined) {
                    this.nonces = data.nonces;
                }
            }
        }
        get contract_address() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set contract_address(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get deployer_address() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set deployer_address(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get withdrawer_address() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set withdrawer_address(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get nonces() {
            return pb_1.Message.getFieldWithDefault(this, 4, []) as number[];
        }
        set nonces(value: number[]) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            contract_address?: string;
            deployer_address?: string;
            withdrawer_address?: string;
            nonces?: number[];
        }): MsgRegisterFeeSplit {
            const message = new MsgRegisterFeeSplit({});
            if (data.contract_address != null) {
                message.contract_address = data.contract_address;
            }
            if (data.deployer_address != null) {
                message.deployer_address = data.deployer_address;
            }
            if (data.withdrawer_address != null) {
                message.withdrawer_address = data.withdrawer_address;
            }
            if (data.nonces != null) {
                message.nonces = data.nonces;
            }
            return message;
        }
        toObject() {
            const data: {
                contract_address?: string;
                deployer_address?: string;
                withdrawer_address?: string;
                nonces?: number[];
            } = {};
            if (this.contract_address != null) {
                data.contract_address = this.contract_address;
            }
            if (this.deployer_address != null) {
                data.deployer_address = this.deployer_address;
            }
            if (this.withdrawer_address != null) {
                data.withdrawer_address = this.withdrawer_address;
            }
            if (this.nonces != null) {
                data.nonces = this.nonces;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.contract_address.length)
                writer.writeString(1, this.contract_address);
            if (this.deployer_address.length)
                writer.writeString(2, this.deployer_address);
            if (this.withdrawer_address.length)
                writer.writeString(3, this.withdrawer_address);
            if (this.nonces.length)
                writer.writePackedUint64(4, this.nonces);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgRegisterFeeSplit {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgRegisterFeeSplit();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.contract_address = reader.readString();
                        break;
                    case 2:
                        message.deployer_address = reader.readString();
                        break;
                    case 3:
                        message.withdrawer_address = reader.readString();
                        break;
                    case 4:
                        message.nonces = reader.readPackedUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgRegisterFeeSplit {
            return MsgRegisterFeeSplit.deserialize(bytes);
        }
    }
    export class MsgRegisterFeeSplitResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): MsgRegisterFeeSplitResponse {
            const message = new MsgRegisterFeeSplitResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgRegisterFeeSplitResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgRegisterFeeSplitResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgRegisterFeeSplitResponse {
            return MsgRegisterFeeSplitResponse.deserialize(bytes);
        }
    }
    export class MsgUpdateFeeSplit extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            contract_address?: string;
            deployer_address?: string;
            withdrawer_address?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("contract_address" in data && data.contract_address != undefined) {
                    this.contract_address = data.contract_address;
                }
                if ("deployer_address" in data && data.deployer_address != undefined) {
                    this.deployer_address = data.deployer_address;
                }
                if ("withdrawer_address" in data && data.withdrawer_address != undefined) {
                    this.withdrawer_address = data.withdrawer_address;
                }
            }
        }
        get contract_address() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set contract_address(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get deployer_address() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set deployer_address(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get withdrawer_address() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set withdrawer_address(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            contract_address?: string;
            deployer_address?: string;
            withdrawer_address?: string;
        }): MsgUpdateFeeSplit {
            const message = new MsgUpdateFeeSplit({});
            if (data.contract_address != null) {
                message.contract_address = data.contract_address;
            }
            if (data.deployer_address != null) {
                message.deployer_address = data.deployer_address;
            }
            if (data.withdrawer_address != null) {
                message.withdrawer_address = data.withdrawer_address;
            }
            return message;
        }
        toObject() {
            const data: {
                contract_address?: string;
                deployer_address?: string;
                withdrawer_address?: string;
            } = {};
            if (this.contract_address != null) {
                data.contract_address = this.contract_address;
            }
            if (this.deployer_address != null) {
                data.deployer_address = this.deployer_address;
            }
            if (this.withdrawer_address != null) {
                data.withdrawer_address = this.withdrawer_address;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.contract_address.length)
                writer.writeString(1, this.contract_address);
            if (this.deployer_address.length)
                writer.writeString(2, this.deployer_address);
            if (this.withdrawer_address.length)
                writer.writeString(3, this.withdrawer_address);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgUpdateFeeSplit {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgUpdateFeeSplit();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.contract_address = reader.readString();
                        break;
                    case 2:
                        message.deployer_address = reader.readString();
                        break;
                    case 3:
                        message.withdrawer_address = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgUpdateFeeSplit {
            return MsgUpdateFeeSplit.deserialize(bytes);
        }
    }
    export class MsgUpdateFeeSplitResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): MsgUpdateFeeSplitResponse {
            const message = new MsgUpdateFeeSplitResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgUpdateFeeSplitResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgUpdateFeeSplitResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgUpdateFeeSplitResponse {
            return MsgUpdateFeeSplitResponse.deserialize(bytes);
        }
    }
    export class MsgCancelFeeSplit extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            contract_address?: string;
            deployer_address?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("contract_address" in data && data.contract_address != undefined) {
                    this.contract_address = data.contract_address;
                }
                if ("deployer_address" in data && data.deployer_address != undefined) {
                    this.deployer_address = data.deployer_address;
                }
            }
        }
        get contract_address() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set contract_address(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get deployer_address() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set deployer_address(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            contract_address?: string;
            deployer_address?: string;
        }): MsgCancelFeeSplit {
            const message = new MsgCancelFeeSplit({});
            if (data.contract_address != null) {
                message.contract_address = data.contract_address;
            }
            if (data.deployer_address != null) {
                message.deployer_address = data.deployer_address;
            }
            return message;
        }
        toObject() {
            const data: {
                contract_address?: string;
                deployer_address?: string;
            } = {};
            if (this.contract_address != null) {
                data.contract_address = this.contract_address;
            }
            if (this.deployer_address != null) {
                data.deployer_address = this.deployer_address;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.contract_address.length)
                writer.writeString(1, this.contract_address);
            if (this.deployer_address.length)
                writer.writeString(2, this.deployer_address);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgCancelFeeSplit {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgCancelFeeSplit();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.contract_address = reader.readString();
                        break;
                    case 2:
                        message.deployer_address = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgCancelFeeSplit {
            return MsgCancelFeeSplit.deserialize(bytes);
        }
    }
    export class MsgCancelFeeSplitResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): MsgCancelFeeSplitResponse {
            const message = new MsgCancelFeeSplitResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgCancelFeeSplitResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgCancelFeeSplitResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgCancelFeeSplitResponse {
            return MsgCancelFeeSplitResponse.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedMsgService {
        static definition = {
            RegisterFeeSplit: {
                path: "/evmos.feesplit.v1.Msg/RegisterFeeSplit",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: MsgRegisterFeeSplit) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => MsgRegisterFeeSplit.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: MsgRegisterFeeSplitResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => MsgRegisterFeeSplitResponse.deserialize(new Uint8Array(bytes))
            },
            UpdateFeeSplit: {
                path: "/evmos.feesplit.v1.Msg/UpdateFeeSplit",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: MsgUpdateFeeSplit) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => MsgUpdateFeeSplit.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: MsgUpdateFeeSplitResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => MsgUpdateFeeSplitResponse.deserialize(new Uint8Array(bytes))
            },
            CancelFeeSplit: {
                path: "/evmos.feesplit.v1.Msg/CancelFeeSplit",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: MsgCancelFeeSplit) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => MsgCancelFeeSplit.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: MsgCancelFeeSplitResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => MsgCancelFeeSplitResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract RegisterFeeSplit(call: grpc_1.ServerUnaryCall<MsgRegisterFeeSplit, MsgRegisterFeeSplitResponse>, callback: grpc_1.sendUnaryData<MsgRegisterFeeSplitResponse>): void;
        abstract UpdateFeeSplit(call: grpc_1.ServerUnaryCall<MsgUpdateFeeSplit, MsgUpdateFeeSplitResponse>, callback: grpc_1.sendUnaryData<MsgUpdateFeeSplitResponse>): void;
        abstract CancelFeeSplit(call: grpc_1.ServerUnaryCall<MsgCancelFeeSplit, MsgCancelFeeSplitResponse>, callback: grpc_1.sendUnaryData<MsgCancelFeeSplitResponse>): void;
    }
    export class MsgClient extends grpc_1.makeGenericClientConstructor(UnimplementedMsgService.definition, "Msg", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        RegisterFeeSplit: GrpcUnaryServiceInterface<MsgRegisterFeeSplit, MsgRegisterFeeSplitResponse> = (message: MsgRegisterFeeSplit, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<MsgRegisterFeeSplitResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<MsgRegisterFeeSplitResponse>, callback?: grpc_1.requestCallback<MsgRegisterFeeSplitResponse>): grpc_1.ClientUnaryCall => {
            return super.RegisterFeeSplit(message, metadata, options, callback);
        };
        UpdateFeeSplit: GrpcUnaryServiceInterface<MsgUpdateFeeSplit, MsgUpdateFeeSplitResponse> = (message: MsgUpdateFeeSplit, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<MsgUpdateFeeSplitResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<MsgUpdateFeeSplitResponse>, callback?: grpc_1.requestCallback<MsgUpdateFeeSplitResponse>): grpc_1.ClientUnaryCall => {
            return super.UpdateFeeSplit(message, metadata, options, callback);
        };
        CancelFeeSplit: GrpcUnaryServiceInterface<MsgCancelFeeSplit, MsgCancelFeeSplitResponse> = (message: MsgCancelFeeSplit, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<MsgCancelFeeSplitResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<MsgCancelFeeSplitResponse>, callback?: grpc_1.requestCallback<MsgCancelFeeSplitResponse>): grpc_1.ClientUnaryCall => {
            return super.CancelFeeSplit(message, metadata, options, callback);
        };
    }
}
