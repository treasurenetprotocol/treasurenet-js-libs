/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 4.25.1
 * source: gravity/v1/attestation.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../gogoproto/gogo";
import * as dependency_2 from "./../../google/protobuf/any";
import * as pb_1 from "google-protobuf";
export namespace gravity.v1 {
    export enum ClaimType {
        CLAIM_TYPE_UNSPECIFIED = 0,
        CLAIM_TYPE_SEND_TO_COSMOS = 1,
        CLAIM_TYPE_BATCH_SEND_TO_ETH = 2,
        CLAIM_TYPE_ERC20_DEPLOYED = 3,
        CLAIM_TYPE_LOGIC_CALL_EXECUTED = 4,
        CLAIM_TYPE_VALSET_UPDATED = 5
    }
    export class Attestation extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            observed?: boolean;
            votes?: string[];
            height?: number;
            claim?: dependency_2.google.protobuf.Any;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("observed" in data && data.observed != undefined) {
                    this.observed = data.observed;
                }
                if ("votes" in data && data.votes != undefined) {
                    this.votes = data.votes;
                }
                if ("height" in data && data.height != undefined) {
                    this.height = data.height;
                }
                if ("claim" in data && data.claim != undefined) {
                    this.claim = data.claim;
                }
            }
        }
        get observed() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set observed(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get votes() {
            return pb_1.Message.getFieldWithDefault(this, 2, []) as string[];
        }
        set votes(value: string[]) {
            pb_1.Message.setField(this, 2, value);
        }
        get height() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set height(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get claim() {
            return pb_1.Message.getWrapperField(this, dependency_2.google.protobuf.Any, 4) as dependency_2.google.protobuf.Any;
        }
        set claim(value: dependency_2.google.protobuf.Any) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_claim() {
            return pb_1.Message.getField(this, 4) != null;
        }
        static fromObject(data: {
            observed?: boolean;
            votes?: string[];
            height?: number;
            claim?: ReturnType<typeof dependency_2.google.protobuf.Any.prototype.toObject>;
        }): Attestation {
            const message = new Attestation({});
            if (data.observed != null) {
                message.observed = data.observed;
            }
            if (data.votes != null) {
                message.votes = data.votes;
            }
            if (data.height != null) {
                message.height = data.height;
            }
            if (data.claim != null) {
                message.claim = dependency_2.google.protobuf.Any.fromObject(data.claim);
            }
            return message;
        }
        toObject() {
            const data: {
                observed?: boolean;
                votes?: string[];
                height?: number;
                claim?: ReturnType<typeof dependency_2.google.protobuf.Any.prototype.toObject>;
            } = {};
            if (this.observed != null) {
                data.observed = this.observed;
            }
            if (this.votes != null) {
                data.votes = this.votes;
            }
            if (this.height != null) {
                data.height = this.height;
            }
            if (this.claim != null) {
                data.claim = this.claim.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.observed != false)
                writer.writeBool(1, this.observed);
            if (this.votes.length)
                writer.writeRepeatedString(2, this.votes);
            if (this.height != 0)
                writer.writeUint64(3, this.height);
            if (this.has_claim)
                writer.writeMessage(4, this.claim, () => this.claim.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Attestation {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Attestation();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.observed = reader.readBool();
                        break;
                    case 2:
                        pb_1.Message.addToRepeatedField(message, 2, reader.readString());
                        break;
                    case 3:
                        message.height = reader.readUint64();
                        break;
                    case 4:
                        reader.readMessage(message.claim, () => message.claim = dependency_2.google.protobuf.Any.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Attestation {
            return Attestation.deserialize(bytes);
        }
    }
    export class ERC20Token extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            contract?: string;
            amount?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("contract" in data && data.contract != undefined) {
                    this.contract = data.contract;
                }
                if ("amount" in data && data.amount != undefined) {
                    this.amount = data.amount;
                }
            }
        }
        get contract() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set contract(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get amount() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set amount(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            contract?: string;
            amount?: string;
        }): ERC20Token {
            const message = new ERC20Token({});
            if (data.contract != null) {
                message.contract = data.contract;
            }
            if (data.amount != null) {
                message.amount = data.amount;
            }
            return message;
        }
        toObject() {
            const data: {
                contract?: string;
                amount?: string;
            } = {};
            if (this.contract != null) {
                data.contract = this.contract;
            }
            if (this.amount != null) {
                data.amount = this.amount;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.contract.length)
                writer.writeString(1, this.contract);
            if (this.amount.length)
                writer.writeString(2, this.amount);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ERC20Token {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ERC20Token();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.contract = reader.readString();
                        break;
                    case 2:
                        message.amount = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ERC20Token {
            return ERC20Token.deserialize(bytes);
        }
    }
    export class EventObservation extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            attestation_type?: string;
            bridge_contract?: string;
            bridge_chain_id?: string;
            attestation_id?: string;
            nonce?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("attestation_type" in data && data.attestation_type != undefined) {
                    this.attestation_type = data.attestation_type;
                }
                if ("bridge_contract" in data && data.bridge_contract != undefined) {
                    this.bridge_contract = data.bridge_contract;
                }
                if ("bridge_chain_id" in data && data.bridge_chain_id != undefined) {
                    this.bridge_chain_id = data.bridge_chain_id;
                }
                if ("attestation_id" in data && data.attestation_id != undefined) {
                    this.attestation_id = data.attestation_id;
                }
                if ("nonce" in data && data.nonce != undefined) {
                    this.nonce = data.nonce;
                }
            }
        }
        get attestation_type() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set attestation_type(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get bridge_contract() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set bridge_contract(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get bridge_chain_id() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set bridge_chain_id(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get attestation_id() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set attestation_id(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get nonce() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set nonce(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            attestation_type?: string;
            bridge_contract?: string;
            bridge_chain_id?: string;
            attestation_id?: string;
            nonce?: string;
        }): EventObservation {
            const message = new EventObservation({});
            if (data.attestation_type != null) {
                message.attestation_type = data.attestation_type;
            }
            if (data.bridge_contract != null) {
                message.bridge_contract = data.bridge_contract;
            }
            if (data.bridge_chain_id != null) {
                message.bridge_chain_id = data.bridge_chain_id;
            }
            if (data.attestation_id != null) {
                message.attestation_id = data.attestation_id;
            }
            if (data.nonce != null) {
                message.nonce = data.nonce;
            }
            return message;
        }
        toObject() {
            const data: {
                attestation_type?: string;
                bridge_contract?: string;
                bridge_chain_id?: string;
                attestation_id?: string;
                nonce?: string;
            } = {};
            if (this.attestation_type != null) {
                data.attestation_type = this.attestation_type;
            }
            if (this.bridge_contract != null) {
                data.bridge_contract = this.bridge_contract;
            }
            if (this.bridge_chain_id != null) {
                data.bridge_chain_id = this.bridge_chain_id;
            }
            if (this.attestation_id != null) {
                data.attestation_id = this.attestation_id;
            }
            if (this.nonce != null) {
                data.nonce = this.nonce;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.attestation_type.length)
                writer.writeString(1, this.attestation_type);
            if (this.bridge_contract.length)
                writer.writeString(2, this.bridge_contract);
            if (this.bridge_chain_id.length)
                writer.writeString(3, this.bridge_chain_id);
            if (this.attestation_id.length)
                writer.writeString(4, this.attestation_id);
            if (this.nonce.length)
                writer.writeString(5, this.nonce);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): EventObservation {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new EventObservation();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.attestation_type = reader.readString();
                        break;
                    case 2:
                        message.bridge_contract = reader.readString();
                        break;
                    case 3:
                        message.bridge_chain_id = reader.readString();
                        break;
                    case 4:
                        message.attestation_id = reader.readString();
                        break;
                    case 5:
                        message.nonce = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): EventObservation {
            return EventObservation.deserialize(bytes);
        }
    }
    export class EventInvalidSendToCosmosReceiver extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            amount?: string;
            nonce?: string;
            token?: string;
            sender?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("amount" in data && data.amount != undefined) {
                    this.amount = data.amount;
                }
                if ("nonce" in data && data.nonce != undefined) {
                    this.nonce = data.nonce;
                }
                if ("token" in data && data.token != undefined) {
                    this.token = data.token;
                }
                if ("sender" in data && data.sender != undefined) {
                    this.sender = data.sender;
                }
            }
        }
        get amount() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set amount(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get nonce() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set nonce(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get token() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set token(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get sender() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set sender(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            amount?: string;
            nonce?: string;
            token?: string;
            sender?: string;
        }): EventInvalidSendToCosmosReceiver {
            const message = new EventInvalidSendToCosmosReceiver({});
            if (data.amount != null) {
                message.amount = data.amount;
            }
            if (data.nonce != null) {
                message.nonce = data.nonce;
            }
            if (data.token != null) {
                message.token = data.token;
            }
            if (data.sender != null) {
                message.sender = data.sender;
            }
            return message;
        }
        toObject() {
            const data: {
                amount?: string;
                nonce?: string;
                token?: string;
                sender?: string;
            } = {};
            if (this.amount != null) {
                data.amount = this.amount;
            }
            if (this.nonce != null) {
                data.nonce = this.nonce;
            }
            if (this.token != null) {
                data.token = this.token;
            }
            if (this.sender != null) {
                data.sender = this.sender;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.amount.length)
                writer.writeString(1, this.amount);
            if (this.nonce.length)
                writer.writeString(2, this.nonce);
            if (this.token.length)
                writer.writeString(3, this.token);
            if (this.sender.length)
                writer.writeString(4, this.sender);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): EventInvalidSendToCosmosReceiver {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new EventInvalidSendToCosmosReceiver();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.amount = reader.readString();
                        break;
                    case 2:
                        message.nonce = reader.readString();
                        break;
                    case 3:
                        message.token = reader.readString();
                        break;
                    case 4:
                        message.sender = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): EventInvalidSendToCosmosReceiver {
            return EventInvalidSendToCosmosReceiver.deserialize(bytes);
        }
    }
    export class EventSendToCosmos extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            amount?: string;
            nonce?: string;
            token?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("amount" in data && data.amount != undefined) {
                    this.amount = data.amount;
                }
                if ("nonce" in data && data.nonce != undefined) {
                    this.nonce = data.nonce;
                }
                if ("token" in data && data.token != undefined) {
                    this.token = data.token;
                }
            }
        }
        get amount() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set amount(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get nonce() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set nonce(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get token() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set token(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            amount?: string;
            nonce?: string;
            token?: string;
        }): EventSendToCosmos {
            const message = new EventSendToCosmos({});
            if (data.amount != null) {
                message.amount = data.amount;
            }
            if (data.nonce != null) {
                message.nonce = data.nonce;
            }
            if (data.token != null) {
                message.token = data.token;
            }
            return message;
        }
        toObject() {
            const data: {
                amount?: string;
                nonce?: string;
                token?: string;
            } = {};
            if (this.amount != null) {
                data.amount = this.amount;
            }
            if (this.nonce != null) {
                data.nonce = this.nonce;
            }
            if (this.token != null) {
                data.token = this.token;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.amount.length)
                writer.writeString(1, this.amount);
            if (this.nonce.length)
                writer.writeString(2, this.nonce);
            if (this.token.length)
                writer.writeString(3, this.token);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): EventSendToCosmos {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new EventSendToCosmos();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.amount = reader.readString();
                        break;
                    case 2:
                        message.nonce = reader.readString();
                        break;
                    case 3:
                        message.token = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): EventSendToCosmos {
            return EventSendToCosmos.deserialize(bytes);
        }
    }
    export class EventSendToCosmosLocal extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            nonce?: string;
            receiver?: string;
            token?: string;
            amount?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("nonce" in data && data.nonce != undefined) {
                    this.nonce = data.nonce;
                }
                if ("receiver" in data && data.receiver != undefined) {
                    this.receiver = data.receiver;
                }
                if ("token" in data && data.token != undefined) {
                    this.token = data.token;
                }
                if ("amount" in data && data.amount != undefined) {
                    this.amount = data.amount;
                }
            }
        }
        get nonce() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set nonce(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get receiver() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set receiver(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get token() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set token(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get amount() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set amount(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            nonce?: string;
            receiver?: string;
            token?: string;
            amount?: string;
        }): EventSendToCosmosLocal {
            const message = new EventSendToCosmosLocal({});
            if (data.nonce != null) {
                message.nonce = data.nonce;
            }
            if (data.receiver != null) {
                message.receiver = data.receiver;
            }
            if (data.token != null) {
                message.token = data.token;
            }
            if (data.amount != null) {
                message.amount = data.amount;
            }
            return message;
        }
        toObject() {
            const data: {
                nonce?: string;
                receiver?: string;
                token?: string;
                amount?: string;
            } = {};
            if (this.nonce != null) {
                data.nonce = this.nonce;
            }
            if (this.receiver != null) {
                data.receiver = this.receiver;
            }
            if (this.token != null) {
                data.token = this.token;
            }
            if (this.amount != null) {
                data.amount = this.amount;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.nonce.length)
                writer.writeString(1, this.nonce);
            if (this.receiver.length)
                writer.writeString(2, this.receiver);
            if (this.token.length)
                writer.writeString(3, this.token);
            if (this.amount.length)
                writer.writeString(4, this.amount);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): EventSendToCosmosLocal {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new EventSendToCosmosLocal();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.nonce = reader.readString();
                        break;
                    case 2:
                        message.receiver = reader.readString();
                        break;
                    case 3:
                        message.token = reader.readString();
                        break;
                    case 4:
                        message.amount = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): EventSendToCosmosLocal {
            return EventSendToCosmosLocal.deserialize(bytes);
        }
    }
    export class EventSendToCosmosIbc extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            nonce?: string;
            receiver?: string;
            token?: string;
            amount?: string;
            channel?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("nonce" in data && data.nonce != undefined) {
                    this.nonce = data.nonce;
                }
                if ("receiver" in data && data.receiver != undefined) {
                    this.receiver = data.receiver;
                }
                if ("token" in data && data.token != undefined) {
                    this.token = data.token;
                }
                if ("amount" in data && data.amount != undefined) {
                    this.amount = data.amount;
                }
                if ("channel" in data && data.channel != undefined) {
                    this.channel = data.channel;
                }
            }
        }
        get nonce() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set nonce(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get receiver() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set receiver(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get token() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set token(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get amount() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set amount(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get channel() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set channel(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            nonce?: string;
            receiver?: string;
            token?: string;
            amount?: string;
            channel?: string;
        }): EventSendToCosmosIbc {
            const message = new EventSendToCosmosIbc({});
            if (data.nonce != null) {
                message.nonce = data.nonce;
            }
            if (data.receiver != null) {
                message.receiver = data.receiver;
            }
            if (data.token != null) {
                message.token = data.token;
            }
            if (data.amount != null) {
                message.amount = data.amount;
            }
            if (data.channel != null) {
                message.channel = data.channel;
            }
            return message;
        }
        toObject() {
            const data: {
                nonce?: string;
                receiver?: string;
                token?: string;
                amount?: string;
                channel?: string;
            } = {};
            if (this.nonce != null) {
                data.nonce = this.nonce;
            }
            if (this.receiver != null) {
                data.receiver = this.receiver;
            }
            if (this.token != null) {
                data.token = this.token;
            }
            if (this.amount != null) {
                data.amount = this.amount;
            }
            if (this.channel != null) {
                data.channel = this.channel;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.nonce.length)
                writer.writeString(1, this.nonce);
            if (this.receiver.length)
                writer.writeString(2, this.receiver);
            if (this.token.length)
                writer.writeString(3, this.token);
            if (this.amount.length)
                writer.writeString(4, this.amount);
            if (this.channel.length)
                writer.writeString(5, this.channel);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): EventSendToCosmosIbc {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new EventSendToCosmosIbc();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.nonce = reader.readString();
                        break;
                    case 2:
                        message.receiver = reader.readString();
                        break;
                    case 3:
                        message.token = reader.readString();
                        break;
                    case 4:
                        message.amount = reader.readString();
                        break;
                    case 5:
                        message.channel = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): EventSendToCosmosIbc {
            return EventSendToCosmosIbc.deserialize(bytes);
        }
    }
}
