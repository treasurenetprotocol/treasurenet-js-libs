/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 4.25.1
 * source: gravity/v1/query.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./genesis";
import * as dependency_2 from "./types";
import * as dependency_3 from "./msgs";
import * as dependency_4 from "./pool";
import * as dependency_5 from "./batch";
import * as dependency_6 from "./attestation";
import * as dependency_7 from "./../../google/api/annotations";
import * as dependency_8 from "./../../gogoproto/gogo";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace gravity.v1 {
    export class QueryParamsRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): QueryParamsRequest {
            const message = new QueryParamsRequest({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryParamsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryParamsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryParamsRequest {
            return QueryParamsRequest.deserialize(bytes);
        }
    }
    export class QueryParamsResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            params?: dependency_1.gravity.v1.Params;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("params" in data && data.params != undefined) {
                    this.params = data.params;
                }
            }
        }
        get params() {
            return pb_1.Message.getWrapperField(this, dependency_1.gravity.v1.Params, 1) as dependency_1.gravity.v1.Params;
        }
        set params(value: dependency_1.gravity.v1.Params) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_params() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            params?: ReturnType<typeof dependency_1.gravity.v1.Params.prototype.toObject>;
        }): QueryParamsResponse {
            const message = new QueryParamsResponse({});
            if (data.params != null) {
                message.params = dependency_1.gravity.v1.Params.fromObject(data.params);
            }
            return message;
        }
        toObject() {
            const data: {
                params?: ReturnType<typeof dependency_1.gravity.v1.Params.prototype.toObject>;
            } = {};
            if (this.params != null) {
                data.params = this.params.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_params)
                writer.writeMessage(1, this.params, () => this.params.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryParamsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryParamsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.params, () => message.params = dependency_1.gravity.v1.Params.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryParamsResponse {
            return QueryParamsResponse.deserialize(bytes);
        }
    }
    export class QueryCurrentValsetRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): QueryCurrentValsetRequest {
            const message = new QueryCurrentValsetRequest({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryCurrentValsetRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryCurrentValsetRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryCurrentValsetRequest {
            return QueryCurrentValsetRequest.deserialize(bytes);
        }
    }
    export class QueryCurrentValsetResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            valset?: dependency_2.gravity.v1.Valset;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("valset" in data && data.valset != undefined) {
                    this.valset = data.valset;
                }
            }
        }
        get valset() {
            return pb_1.Message.getWrapperField(this, dependency_2.gravity.v1.Valset, 1) as dependency_2.gravity.v1.Valset;
        }
        set valset(value: dependency_2.gravity.v1.Valset) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_valset() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            valset?: ReturnType<typeof dependency_2.gravity.v1.Valset.prototype.toObject>;
        }): QueryCurrentValsetResponse {
            const message = new QueryCurrentValsetResponse({});
            if (data.valset != null) {
                message.valset = dependency_2.gravity.v1.Valset.fromObject(data.valset);
            }
            return message;
        }
        toObject() {
            const data: {
                valset?: ReturnType<typeof dependency_2.gravity.v1.Valset.prototype.toObject>;
            } = {};
            if (this.valset != null) {
                data.valset = this.valset.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_valset)
                writer.writeMessage(1, this.valset, () => this.valset.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryCurrentValsetResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryCurrentValsetResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.valset, () => message.valset = dependency_2.gravity.v1.Valset.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryCurrentValsetResponse {
            return QueryCurrentValsetResponse.deserialize(bytes);
        }
    }
    export class QueryValsetRequestRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            nonce?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("nonce" in data && data.nonce != undefined) {
                    this.nonce = data.nonce;
                }
            }
        }
        get nonce() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set nonce(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            nonce?: number;
        }): QueryValsetRequestRequest {
            const message = new QueryValsetRequestRequest({});
            if (data.nonce != null) {
                message.nonce = data.nonce;
            }
            return message;
        }
        toObject() {
            const data: {
                nonce?: number;
            } = {};
            if (this.nonce != null) {
                data.nonce = this.nonce;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.nonce != 0)
                writer.writeUint64(1, this.nonce);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryValsetRequestRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryValsetRequestRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.nonce = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryValsetRequestRequest {
            return QueryValsetRequestRequest.deserialize(bytes);
        }
    }
    export class QueryValsetRequestResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            valset?: dependency_2.gravity.v1.Valset;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("valset" in data && data.valset != undefined) {
                    this.valset = data.valset;
                }
            }
        }
        get valset() {
            return pb_1.Message.getWrapperField(this, dependency_2.gravity.v1.Valset, 1) as dependency_2.gravity.v1.Valset;
        }
        set valset(value: dependency_2.gravity.v1.Valset) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_valset() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            valset?: ReturnType<typeof dependency_2.gravity.v1.Valset.prototype.toObject>;
        }): QueryValsetRequestResponse {
            const message = new QueryValsetRequestResponse({});
            if (data.valset != null) {
                message.valset = dependency_2.gravity.v1.Valset.fromObject(data.valset);
            }
            return message;
        }
        toObject() {
            const data: {
                valset?: ReturnType<typeof dependency_2.gravity.v1.Valset.prototype.toObject>;
            } = {};
            if (this.valset != null) {
                data.valset = this.valset.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_valset)
                writer.writeMessage(1, this.valset, () => this.valset.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryValsetRequestResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryValsetRequestResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.valset, () => message.valset = dependency_2.gravity.v1.Valset.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryValsetRequestResponse {
            return QueryValsetRequestResponse.deserialize(bytes);
        }
    }
    export class QueryValsetConfirmRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            nonce?: number;
            address?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("nonce" in data && data.nonce != undefined) {
                    this.nonce = data.nonce;
                }
                if ("address" in data && data.address != undefined) {
                    this.address = data.address;
                }
            }
        }
        get nonce() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set nonce(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get address() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set address(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            nonce?: number;
            address?: string;
        }): QueryValsetConfirmRequest {
            const message = new QueryValsetConfirmRequest({});
            if (data.nonce != null) {
                message.nonce = data.nonce;
            }
            if (data.address != null) {
                message.address = data.address;
            }
            return message;
        }
        toObject() {
            const data: {
                nonce?: number;
                address?: string;
            } = {};
            if (this.nonce != null) {
                data.nonce = this.nonce;
            }
            if (this.address != null) {
                data.address = this.address;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.nonce != 0)
                writer.writeUint64(1, this.nonce);
            if (this.address.length)
                writer.writeString(2, this.address);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryValsetConfirmRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryValsetConfirmRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.nonce = reader.readUint64();
                        break;
                    case 2:
                        message.address = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryValsetConfirmRequest {
            return QueryValsetConfirmRequest.deserialize(bytes);
        }
    }
    export class QueryValsetConfirmResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            confirm?: dependency_3.gravity.v1.MsgValsetConfirm;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("confirm" in data && data.confirm != undefined) {
                    this.confirm = data.confirm;
                }
            }
        }
        get confirm() {
            return pb_1.Message.getWrapperField(this, dependency_3.gravity.v1.MsgValsetConfirm, 1) as dependency_3.gravity.v1.MsgValsetConfirm;
        }
        set confirm(value: dependency_3.gravity.v1.MsgValsetConfirm) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_confirm() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            confirm?: ReturnType<typeof dependency_3.gravity.v1.MsgValsetConfirm.prototype.toObject>;
        }): QueryValsetConfirmResponse {
            const message = new QueryValsetConfirmResponse({});
            if (data.confirm != null) {
                message.confirm = dependency_3.gravity.v1.MsgValsetConfirm.fromObject(data.confirm);
            }
            return message;
        }
        toObject() {
            const data: {
                confirm?: ReturnType<typeof dependency_3.gravity.v1.MsgValsetConfirm.prototype.toObject>;
            } = {};
            if (this.confirm != null) {
                data.confirm = this.confirm.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_confirm)
                writer.writeMessage(1, this.confirm, () => this.confirm.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryValsetConfirmResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryValsetConfirmResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.confirm, () => message.confirm = dependency_3.gravity.v1.MsgValsetConfirm.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryValsetConfirmResponse {
            return QueryValsetConfirmResponse.deserialize(bytes);
        }
    }
    export class QueryValsetConfirmsByNonceRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            nonce?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("nonce" in data && data.nonce != undefined) {
                    this.nonce = data.nonce;
                }
            }
        }
        get nonce() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set nonce(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            nonce?: number;
        }): QueryValsetConfirmsByNonceRequest {
            const message = new QueryValsetConfirmsByNonceRequest({});
            if (data.nonce != null) {
                message.nonce = data.nonce;
            }
            return message;
        }
        toObject() {
            const data: {
                nonce?: number;
            } = {};
            if (this.nonce != null) {
                data.nonce = this.nonce;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.nonce != 0)
                writer.writeUint64(1, this.nonce);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryValsetConfirmsByNonceRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryValsetConfirmsByNonceRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.nonce = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryValsetConfirmsByNonceRequest {
            return QueryValsetConfirmsByNonceRequest.deserialize(bytes);
        }
    }
    export class QueryValsetConfirmsByNonceResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            confirms?: dependency_3.gravity.v1.MsgValsetConfirm[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("confirms" in data && data.confirms != undefined) {
                    this.confirms = data.confirms;
                }
            }
        }
        get confirms() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_3.gravity.v1.MsgValsetConfirm, 1) as dependency_3.gravity.v1.MsgValsetConfirm[];
        }
        set confirms(value: dependency_3.gravity.v1.MsgValsetConfirm[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            confirms?: ReturnType<typeof dependency_3.gravity.v1.MsgValsetConfirm.prototype.toObject>[];
        }): QueryValsetConfirmsByNonceResponse {
            const message = new QueryValsetConfirmsByNonceResponse({});
            if (data.confirms != null) {
                message.confirms = data.confirms.map(item => dependency_3.gravity.v1.MsgValsetConfirm.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                confirms?: ReturnType<typeof dependency_3.gravity.v1.MsgValsetConfirm.prototype.toObject>[];
            } = {};
            if (this.confirms != null) {
                data.confirms = this.confirms.map((item: dependency_3.gravity.v1.MsgValsetConfirm) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.confirms.length)
                writer.writeRepeatedMessage(1, this.confirms, (item: dependency_3.gravity.v1.MsgValsetConfirm) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryValsetConfirmsByNonceResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryValsetConfirmsByNonceResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.confirms, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_3.gravity.v1.MsgValsetConfirm.deserialize(reader), dependency_3.gravity.v1.MsgValsetConfirm));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryValsetConfirmsByNonceResponse {
            return QueryValsetConfirmsByNonceResponse.deserialize(bytes);
        }
    }
    export class QueryLastValsetRequestsRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): QueryLastValsetRequestsRequest {
            const message = new QueryLastValsetRequestsRequest({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryLastValsetRequestsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryLastValsetRequestsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryLastValsetRequestsRequest {
            return QueryLastValsetRequestsRequest.deserialize(bytes);
        }
    }
    export class QueryLastValsetRequestsResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            valsets?: dependency_2.gravity.v1.Valset[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("valsets" in data && data.valsets != undefined) {
                    this.valsets = data.valsets;
                }
            }
        }
        get valsets() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_2.gravity.v1.Valset, 1) as dependency_2.gravity.v1.Valset[];
        }
        set valsets(value: dependency_2.gravity.v1.Valset[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            valsets?: ReturnType<typeof dependency_2.gravity.v1.Valset.prototype.toObject>[];
        }): QueryLastValsetRequestsResponse {
            const message = new QueryLastValsetRequestsResponse({});
            if (data.valsets != null) {
                message.valsets = data.valsets.map(item => dependency_2.gravity.v1.Valset.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                valsets?: ReturnType<typeof dependency_2.gravity.v1.Valset.prototype.toObject>[];
            } = {};
            if (this.valsets != null) {
                data.valsets = this.valsets.map((item: dependency_2.gravity.v1.Valset) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.valsets.length)
                writer.writeRepeatedMessage(1, this.valsets, (item: dependency_2.gravity.v1.Valset) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryLastValsetRequestsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryLastValsetRequestsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.valsets, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_2.gravity.v1.Valset.deserialize(reader), dependency_2.gravity.v1.Valset));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryLastValsetRequestsResponse {
            return QueryLastValsetRequestsResponse.deserialize(bytes);
        }
    }
    export class QueryLastPendingValsetRequestByAddrRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            address?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("address" in data && data.address != undefined) {
                    this.address = data.address;
                }
            }
        }
        get address() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set address(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            address?: string;
        }): QueryLastPendingValsetRequestByAddrRequest {
            const message = new QueryLastPendingValsetRequestByAddrRequest({});
            if (data.address != null) {
                message.address = data.address;
            }
            return message;
        }
        toObject() {
            const data: {
                address?: string;
            } = {};
            if (this.address != null) {
                data.address = this.address;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.address.length)
                writer.writeString(1, this.address);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryLastPendingValsetRequestByAddrRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryLastPendingValsetRequestByAddrRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.address = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryLastPendingValsetRequestByAddrRequest {
            return QueryLastPendingValsetRequestByAddrRequest.deserialize(bytes);
        }
    }
    export class QueryLastPendingValsetRequestByAddrResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            valsets?: dependency_2.gravity.v1.Valset[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("valsets" in data && data.valsets != undefined) {
                    this.valsets = data.valsets;
                }
            }
        }
        get valsets() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_2.gravity.v1.Valset, 1) as dependency_2.gravity.v1.Valset[];
        }
        set valsets(value: dependency_2.gravity.v1.Valset[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            valsets?: ReturnType<typeof dependency_2.gravity.v1.Valset.prototype.toObject>[];
        }): QueryLastPendingValsetRequestByAddrResponse {
            const message = new QueryLastPendingValsetRequestByAddrResponse({});
            if (data.valsets != null) {
                message.valsets = data.valsets.map(item => dependency_2.gravity.v1.Valset.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                valsets?: ReturnType<typeof dependency_2.gravity.v1.Valset.prototype.toObject>[];
            } = {};
            if (this.valsets != null) {
                data.valsets = this.valsets.map((item: dependency_2.gravity.v1.Valset) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.valsets.length)
                writer.writeRepeatedMessage(1, this.valsets, (item: dependency_2.gravity.v1.Valset) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryLastPendingValsetRequestByAddrResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryLastPendingValsetRequestByAddrResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.valsets, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_2.gravity.v1.Valset.deserialize(reader), dependency_2.gravity.v1.Valset));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryLastPendingValsetRequestByAddrResponse {
            return QueryLastPendingValsetRequestByAddrResponse.deserialize(bytes);
        }
    }
    export class QueryBatchFeeRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): QueryBatchFeeRequest {
            const message = new QueryBatchFeeRequest({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryBatchFeeRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryBatchFeeRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryBatchFeeRequest {
            return QueryBatchFeeRequest.deserialize(bytes);
        }
    }
    export class QueryBatchFeeResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            batch_fees?: dependency_4.gravity.v1.BatchFees[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("batch_fees" in data && data.batch_fees != undefined) {
                    this.batch_fees = data.batch_fees;
                }
            }
        }
        get batch_fees() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_4.gravity.v1.BatchFees, 1) as dependency_4.gravity.v1.BatchFees[];
        }
        set batch_fees(value: dependency_4.gravity.v1.BatchFees[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            batch_fees?: ReturnType<typeof dependency_4.gravity.v1.BatchFees.prototype.toObject>[];
        }): QueryBatchFeeResponse {
            const message = new QueryBatchFeeResponse({});
            if (data.batch_fees != null) {
                message.batch_fees = data.batch_fees.map(item => dependency_4.gravity.v1.BatchFees.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                batch_fees?: ReturnType<typeof dependency_4.gravity.v1.BatchFees.prototype.toObject>[];
            } = {};
            if (this.batch_fees != null) {
                data.batch_fees = this.batch_fees.map((item: dependency_4.gravity.v1.BatchFees) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.batch_fees.length)
                writer.writeRepeatedMessage(1, this.batch_fees, (item: dependency_4.gravity.v1.BatchFees) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryBatchFeeResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryBatchFeeResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.batch_fees, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_4.gravity.v1.BatchFees.deserialize(reader), dependency_4.gravity.v1.BatchFees));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryBatchFeeResponse {
            return QueryBatchFeeResponse.deserialize(bytes);
        }
    }
    export class QueryLastPendingBatchRequestByAddrRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            address?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("address" in data && data.address != undefined) {
                    this.address = data.address;
                }
            }
        }
        get address() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set address(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            address?: string;
        }): QueryLastPendingBatchRequestByAddrRequest {
            const message = new QueryLastPendingBatchRequestByAddrRequest({});
            if (data.address != null) {
                message.address = data.address;
            }
            return message;
        }
        toObject() {
            const data: {
                address?: string;
            } = {};
            if (this.address != null) {
                data.address = this.address;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.address.length)
                writer.writeString(1, this.address);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryLastPendingBatchRequestByAddrRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryLastPendingBatchRequestByAddrRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.address = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryLastPendingBatchRequestByAddrRequest {
            return QueryLastPendingBatchRequestByAddrRequest.deserialize(bytes);
        }
    }
    export class QueryLastPendingBatchRequestByAddrResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            batch?: dependency_5.gravity.v1.OutgoingTxBatch[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("batch" in data && data.batch != undefined) {
                    this.batch = data.batch;
                }
            }
        }
        get batch() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_5.gravity.v1.OutgoingTxBatch, 1) as dependency_5.gravity.v1.OutgoingTxBatch[];
        }
        set batch(value: dependency_5.gravity.v1.OutgoingTxBatch[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            batch?: ReturnType<typeof dependency_5.gravity.v1.OutgoingTxBatch.prototype.toObject>[];
        }): QueryLastPendingBatchRequestByAddrResponse {
            const message = new QueryLastPendingBatchRequestByAddrResponse({});
            if (data.batch != null) {
                message.batch = data.batch.map(item => dependency_5.gravity.v1.OutgoingTxBatch.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                batch?: ReturnType<typeof dependency_5.gravity.v1.OutgoingTxBatch.prototype.toObject>[];
            } = {};
            if (this.batch != null) {
                data.batch = this.batch.map((item: dependency_5.gravity.v1.OutgoingTxBatch) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.batch.length)
                writer.writeRepeatedMessage(1, this.batch, (item: dependency_5.gravity.v1.OutgoingTxBatch) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryLastPendingBatchRequestByAddrResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryLastPendingBatchRequestByAddrResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.batch, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_5.gravity.v1.OutgoingTxBatch.deserialize(reader), dependency_5.gravity.v1.OutgoingTxBatch));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryLastPendingBatchRequestByAddrResponse {
            return QueryLastPendingBatchRequestByAddrResponse.deserialize(bytes);
        }
    }
    export class QueryLastPendingLogicCallByAddrRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            address?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("address" in data && data.address != undefined) {
                    this.address = data.address;
                }
            }
        }
        get address() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set address(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            address?: string;
        }): QueryLastPendingLogicCallByAddrRequest {
            const message = new QueryLastPendingLogicCallByAddrRequest({});
            if (data.address != null) {
                message.address = data.address;
            }
            return message;
        }
        toObject() {
            const data: {
                address?: string;
            } = {};
            if (this.address != null) {
                data.address = this.address;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.address.length)
                writer.writeString(1, this.address);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryLastPendingLogicCallByAddrRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryLastPendingLogicCallByAddrRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.address = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryLastPendingLogicCallByAddrRequest {
            return QueryLastPendingLogicCallByAddrRequest.deserialize(bytes);
        }
    }
    export class QueryLastPendingLogicCallByAddrResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            call?: dependency_5.gravity.v1.OutgoingLogicCall[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("call" in data && data.call != undefined) {
                    this.call = data.call;
                }
            }
        }
        get call() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_5.gravity.v1.OutgoingLogicCall, 1) as dependency_5.gravity.v1.OutgoingLogicCall[];
        }
        set call(value: dependency_5.gravity.v1.OutgoingLogicCall[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            call?: ReturnType<typeof dependency_5.gravity.v1.OutgoingLogicCall.prototype.toObject>[];
        }): QueryLastPendingLogicCallByAddrResponse {
            const message = new QueryLastPendingLogicCallByAddrResponse({});
            if (data.call != null) {
                message.call = data.call.map(item => dependency_5.gravity.v1.OutgoingLogicCall.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                call?: ReturnType<typeof dependency_5.gravity.v1.OutgoingLogicCall.prototype.toObject>[];
            } = {};
            if (this.call != null) {
                data.call = this.call.map((item: dependency_5.gravity.v1.OutgoingLogicCall) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.call.length)
                writer.writeRepeatedMessage(1, this.call, (item: dependency_5.gravity.v1.OutgoingLogicCall) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryLastPendingLogicCallByAddrResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryLastPendingLogicCallByAddrResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.call, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_5.gravity.v1.OutgoingLogicCall.deserialize(reader), dependency_5.gravity.v1.OutgoingLogicCall));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryLastPendingLogicCallByAddrResponse {
            return QueryLastPendingLogicCallByAddrResponse.deserialize(bytes);
        }
    }
    export class QueryOutgoingTxBatchesRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): QueryOutgoingTxBatchesRequest {
            const message = new QueryOutgoingTxBatchesRequest({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryOutgoingTxBatchesRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryOutgoingTxBatchesRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryOutgoingTxBatchesRequest {
            return QueryOutgoingTxBatchesRequest.deserialize(bytes);
        }
    }
    export class QueryOutgoingTxBatchesResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            batches?: dependency_5.gravity.v1.OutgoingTxBatch[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("batches" in data && data.batches != undefined) {
                    this.batches = data.batches;
                }
            }
        }
        get batches() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_5.gravity.v1.OutgoingTxBatch, 1) as dependency_5.gravity.v1.OutgoingTxBatch[];
        }
        set batches(value: dependency_5.gravity.v1.OutgoingTxBatch[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            batches?: ReturnType<typeof dependency_5.gravity.v1.OutgoingTxBatch.prototype.toObject>[];
        }): QueryOutgoingTxBatchesResponse {
            const message = new QueryOutgoingTxBatchesResponse({});
            if (data.batches != null) {
                message.batches = data.batches.map(item => dependency_5.gravity.v1.OutgoingTxBatch.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                batches?: ReturnType<typeof dependency_5.gravity.v1.OutgoingTxBatch.prototype.toObject>[];
            } = {};
            if (this.batches != null) {
                data.batches = this.batches.map((item: dependency_5.gravity.v1.OutgoingTxBatch) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.batches.length)
                writer.writeRepeatedMessage(1, this.batches, (item: dependency_5.gravity.v1.OutgoingTxBatch) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryOutgoingTxBatchesResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryOutgoingTxBatchesResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.batches, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_5.gravity.v1.OutgoingTxBatch.deserialize(reader), dependency_5.gravity.v1.OutgoingTxBatch));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryOutgoingTxBatchesResponse {
            return QueryOutgoingTxBatchesResponse.deserialize(bytes);
        }
    }
    export class QueryOutgoingLogicCallsRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): QueryOutgoingLogicCallsRequest {
            const message = new QueryOutgoingLogicCallsRequest({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryOutgoingLogicCallsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryOutgoingLogicCallsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryOutgoingLogicCallsRequest {
            return QueryOutgoingLogicCallsRequest.deserialize(bytes);
        }
    }
    export class QueryOutgoingLogicCallsResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            calls?: dependency_5.gravity.v1.OutgoingLogicCall[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("calls" in data && data.calls != undefined) {
                    this.calls = data.calls;
                }
            }
        }
        get calls() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_5.gravity.v1.OutgoingLogicCall, 1) as dependency_5.gravity.v1.OutgoingLogicCall[];
        }
        set calls(value: dependency_5.gravity.v1.OutgoingLogicCall[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            calls?: ReturnType<typeof dependency_5.gravity.v1.OutgoingLogicCall.prototype.toObject>[];
        }): QueryOutgoingLogicCallsResponse {
            const message = new QueryOutgoingLogicCallsResponse({});
            if (data.calls != null) {
                message.calls = data.calls.map(item => dependency_5.gravity.v1.OutgoingLogicCall.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                calls?: ReturnType<typeof dependency_5.gravity.v1.OutgoingLogicCall.prototype.toObject>[];
            } = {};
            if (this.calls != null) {
                data.calls = this.calls.map((item: dependency_5.gravity.v1.OutgoingLogicCall) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.calls.length)
                writer.writeRepeatedMessage(1, this.calls, (item: dependency_5.gravity.v1.OutgoingLogicCall) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryOutgoingLogicCallsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryOutgoingLogicCallsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.calls, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_5.gravity.v1.OutgoingLogicCall.deserialize(reader), dependency_5.gravity.v1.OutgoingLogicCall));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryOutgoingLogicCallsResponse {
            return QueryOutgoingLogicCallsResponse.deserialize(bytes);
        }
    }
    export class QueryBatchRequestByNonceRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            nonce?: number;
            contract_address?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("nonce" in data && data.nonce != undefined) {
                    this.nonce = data.nonce;
                }
                if ("contract_address" in data && data.contract_address != undefined) {
                    this.contract_address = data.contract_address;
                }
            }
        }
        get nonce() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set nonce(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get contract_address() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set contract_address(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            nonce?: number;
            contract_address?: string;
        }): QueryBatchRequestByNonceRequest {
            const message = new QueryBatchRequestByNonceRequest({});
            if (data.nonce != null) {
                message.nonce = data.nonce;
            }
            if (data.contract_address != null) {
                message.contract_address = data.contract_address;
            }
            return message;
        }
        toObject() {
            const data: {
                nonce?: number;
                contract_address?: string;
            } = {};
            if (this.nonce != null) {
                data.nonce = this.nonce;
            }
            if (this.contract_address != null) {
                data.contract_address = this.contract_address;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.nonce != 0)
                writer.writeUint64(1, this.nonce);
            if (this.contract_address.length)
                writer.writeString(2, this.contract_address);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryBatchRequestByNonceRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryBatchRequestByNonceRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.nonce = reader.readUint64();
                        break;
                    case 2:
                        message.contract_address = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryBatchRequestByNonceRequest {
            return QueryBatchRequestByNonceRequest.deserialize(bytes);
        }
    }
    export class QueryBatchRequestByNonceResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            batch?: dependency_5.gravity.v1.OutgoingTxBatch;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("batch" in data && data.batch != undefined) {
                    this.batch = data.batch;
                }
            }
        }
        get batch() {
            return pb_1.Message.getWrapperField(this, dependency_5.gravity.v1.OutgoingTxBatch, 1) as dependency_5.gravity.v1.OutgoingTxBatch;
        }
        set batch(value: dependency_5.gravity.v1.OutgoingTxBatch) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_batch() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            batch?: ReturnType<typeof dependency_5.gravity.v1.OutgoingTxBatch.prototype.toObject>;
        }): QueryBatchRequestByNonceResponse {
            const message = new QueryBatchRequestByNonceResponse({});
            if (data.batch != null) {
                message.batch = dependency_5.gravity.v1.OutgoingTxBatch.fromObject(data.batch);
            }
            return message;
        }
        toObject() {
            const data: {
                batch?: ReturnType<typeof dependency_5.gravity.v1.OutgoingTxBatch.prototype.toObject>;
            } = {};
            if (this.batch != null) {
                data.batch = this.batch.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_batch)
                writer.writeMessage(1, this.batch, () => this.batch.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryBatchRequestByNonceResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryBatchRequestByNonceResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.batch, () => message.batch = dependency_5.gravity.v1.OutgoingTxBatch.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryBatchRequestByNonceResponse {
            return QueryBatchRequestByNonceResponse.deserialize(bytes);
        }
    }
    export class QueryBatchConfirmsRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            nonce?: number;
            contract_address?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("nonce" in data && data.nonce != undefined) {
                    this.nonce = data.nonce;
                }
                if ("contract_address" in data && data.contract_address != undefined) {
                    this.contract_address = data.contract_address;
                }
            }
        }
        get nonce() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set nonce(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get contract_address() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set contract_address(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            nonce?: number;
            contract_address?: string;
        }): QueryBatchConfirmsRequest {
            const message = new QueryBatchConfirmsRequest({});
            if (data.nonce != null) {
                message.nonce = data.nonce;
            }
            if (data.contract_address != null) {
                message.contract_address = data.contract_address;
            }
            return message;
        }
        toObject() {
            const data: {
                nonce?: number;
                contract_address?: string;
            } = {};
            if (this.nonce != null) {
                data.nonce = this.nonce;
            }
            if (this.contract_address != null) {
                data.contract_address = this.contract_address;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.nonce != 0)
                writer.writeUint64(1, this.nonce);
            if (this.contract_address.length)
                writer.writeString(2, this.contract_address);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryBatchConfirmsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryBatchConfirmsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.nonce = reader.readUint64();
                        break;
                    case 2:
                        message.contract_address = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryBatchConfirmsRequest {
            return QueryBatchConfirmsRequest.deserialize(bytes);
        }
    }
    export class QueryBatchConfirmsResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            confirms?: dependency_3.gravity.v1.MsgConfirmBatch[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("confirms" in data && data.confirms != undefined) {
                    this.confirms = data.confirms;
                }
            }
        }
        get confirms() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_3.gravity.v1.MsgConfirmBatch, 1) as dependency_3.gravity.v1.MsgConfirmBatch[];
        }
        set confirms(value: dependency_3.gravity.v1.MsgConfirmBatch[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            confirms?: ReturnType<typeof dependency_3.gravity.v1.MsgConfirmBatch.prototype.toObject>[];
        }): QueryBatchConfirmsResponse {
            const message = new QueryBatchConfirmsResponse({});
            if (data.confirms != null) {
                message.confirms = data.confirms.map(item => dependency_3.gravity.v1.MsgConfirmBatch.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                confirms?: ReturnType<typeof dependency_3.gravity.v1.MsgConfirmBatch.prototype.toObject>[];
            } = {};
            if (this.confirms != null) {
                data.confirms = this.confirms.map((item: dependency_3.gravity.v1.MsgConfirmBatch) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.confirms.length)
                writer.writeRepeatedMessage(1, this.confirms, (item: dependency_3.gravity.v1.MsgConfirmBatch) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryBatchConfirmsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryBatchConfirmsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.confirms, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_3.gravity.v1.MsgConfirmBatch.deserialize(reader), dependency_3.gravity.v1.MsgConfirmBatch));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryBatchConfirmsResponse {
            return QueryBatchConfirmsResponse.deserialize(bytes);
        }
    }
    export class QueryLogicConfirmsRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            invalidation_id?: Uint8Array;
            invalidation_nonce?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("invalidation_id" in data && data.invalidation_id != undefined) {
                    this.invalidation_id = data.invalidation_id;
                }
                if ("invalidation_nonce" in data && data.invalidation_nonce != undefined) {
                    this.invalidation_nonce = data.invalidation_nonce;
                }
            }
        }
        get invalidation_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array(0)) as Uint8Array;
        }
        set invalidation_id(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        get invalidation_nonce() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set invalidation_nonce(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            invalidation_id?: Uint8Array;
            invalidation_nonce?: number;
        }): QueryLogicConfirmsRequest {
            const message = new QueryLogicConfirmsRequest({});
            if (data.invalidation_id != null) {
                message.invalidation_id = data.invalidation_id;
            }
            if (data.invalidation_nonce != null) {
                message.invalidation_nonce = data.invalidation_nonce;
            }
            return message;
        }
        toObject() {
            const data: {
                invalidation_id?: Uint8Array;
                invalidation_nonce?: number;
            } = {};
            if (this.invalidation_id != null) {
                data.invalidation_id = this.invalidation_id;
            }
            if (this.invalidation_nonce != null) {
                data.invalidation_nonce = this.invalidation_nonce;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.invalidation_id.length)
                writer.writeBytes(1, this.invalidation_id);
            if (this.invalidation_nonce != 0)
                writer.writeUint64(2, this.invalidation_nonce);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryLogicConfirmsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryLogicConfirmsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.invalidation_id = reader.readBytes();
                        break;
                    case 2:
                        message.invalidation_nonce = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryLogicConfirmsRequest {
            return QueryLogicConfirmsRequest.deserialize(bytes);
        }
    }
    export class QueryLogicConfirmsResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            confirms?: dependency_3.gravity.v1.MsgConfirmLogicCall[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("confirms" in data && data.confirms != undefined) {
                    this.confirms = data.confirms;
                }
            }
        }
        get confirms() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_3.gravity.v1.MsgConfirmLogicCall, 1) as dependency_3.gravity.v1.MsgConfirmLogicCall[];
        }
        set confirms(value: dependency_3.gravity.v1.MsgConfirmLogicCall[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            confirms?: ReturnType<typeof dependency_3.gravity.v1.MsgConfirmLogicCall.prototype.toObject>[];
        }): QueryLogicConfirmsResponse {
            const message = new QueryLogicConfirmsResponse({});
            if (data.confirms != null) {
                message.confirms = data.confirms.map(item => dependency_3.gravity.v1.MsgConfirmLogicCall.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                confirms?: ReturnType<typeof dependency_3.gravity.v1.MsgConfirmLogicCall.prototype.toObject>[];
            } = {};
            if (this.confirms != null) {
                data.confirms = this.confirms.map((item: dependency_3.gravity.v1.MsgConfirmLogicCall) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.confirms.length)
                writer.writeRepeatedMessage(1, this.confirms, (item: dependency_3.gravity.v1.MsgConfirmLogicCall) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryLogicConfirmsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryLogicConfirmsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.confirms, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_3.gravity.v1.MsgConfirmLogicCall.deserialize(reader), dependency_3.gravity.v1.MsgConfirmLogicCall));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryLogicConfirmsResponse {
            return QueryLogicConfirmsResponse.deserialize(bytes);
        }
    }
    export class QueryLastEventNonceByAddrRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            address?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("address" in data && data.address != undefined) {
                    this.address = data.address;
                }
            }
        }
        get address() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set address(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            address?: string;
        }): QueryLastEventNonceByAddrRequest {
            const message = new QueryLastEventNonceByAddrRequest({});
            if (data.address != null) {
                message.address = data.address;
            }
            return message;
        }
        toObject() {
            const data: {
                address?: string;
            } = {};
            if (this.address != null) {
                data.address = this.address;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.address.length)
                writer.writeString(1, this.address);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryLastEventNonceByAddrRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryLastEventNonceByAddrRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.address = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryLastEventNonceByAddrRequest {
            return QueryLastEventNonceByAddrRequest.deserialize(bytes);
        }
    }
    export class QueryLastEventNonceByAddrResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            event_nonce?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("event_nonce" in data && data.event_nonce != undefined) {
                    this.event_nonce = data.event_nonce;
                }
            }
        }
        get event_nonce() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set event_nonce(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            event_nonce?: number;
        }): QueryLastEventNonceByAddrResponse {
            const message = new QueryLastEventNonceByAddrResponse({});
            if (data.event_nonce != null) {
                message.event_nonce = data.event_nonce;
            }
            return message;
        }
        toObject() {
            const data: {
                event_nonce?: number;
            } = {};
            if (this.event_nonce != null) {
                data.event_nonce = this.event_nonce;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.event_nonce != 0)
                writer.writeUint64(1, this.event_nonce);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryLastEventNonceByAddrResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryLastEventNonceByAddrResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.event_nonce = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryLastEventNonceByAddrResponse {
            return QueryLastEventNonceByAddrResponse.deserialize(bytes);
        }
    }
    export class QueryERC20ToDenomRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            erc20?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("erc20" in data && data.erc20 != undefined) {
                    this.erc20 = data.erc20;
                }
            }
        }
        get erc20() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set erc20(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            erc20?: string;
        }): QueryERC20ToDenomRequest {
            const message = new QueryERC20ToDenomRequest({});
            if (data.erc20 != null) {
                message.erc20 = data.erc20;
            }
            return message;
        }
        toObject() {
            const data: {
                erc20?: string;
            } = {};
            if (this.erc20 != null) {
                data.erc20 = this.erc20;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.erc20.length)
                writer.writeString(1, this.erc20);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryERC20ToDenomRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryERC20ToDenomRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.erc20 = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryERC20ToDenomRequest {
            return QueryERC20ToDenomRequest.deserialize(bytes);
        }
    }
    export class QueryERC20ToDenomResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            denom?: string;
            cosmos_originated?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("denom" in data && data.denom != undefined) {
                    this.denom = data.denom;
                }
                if ("cosmos_originated" in data && data.cosmos_originated != undefined) {
                    this.cosmos_originated = data.cosmos_originated;
                }
            }
        }
        get denom() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set denom(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get cosmos_originated() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set cosmos_originated(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            denom?: string;
            cosmos_originated?: boolean;
        }): QueryERC20ToDenomResponse {
            const message = new QueryERC20ToDenomResponse({});
            if (data.denom != null) {
                message.denom = data.denom;
            }
            if (data.cosmos_originated != null) {
                message.cosmos_originated = data.cosmos_originated;
            }
            return message;
        }
        toObject() {
            const data: {
                denom?: string;
                cosmos_originated?: boolean;
            } = {};
            if (this.denom != null) {
                data.denom = this.denom;
            }
            if (this.cosmos_originated != null) {
                data.cosmos_originated = this.cosmos_originated;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.denom.length)
                writer.writeString(1, this.denom);
            if (this.cosmos_originated != false)
                writer.writeBool(2, this.cosmos_originated);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryERC20ToDenomResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryERC20ToDenomResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.denom = reader.readString();
                        break;
                    case 2:
                        message.cosmos_originated = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryERC20ToDenomResponse {
            return QueryERC20ToDenomResponse.deserialize(bytes);
        }
    }
    export class QueryDenomToERC20Request extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            denom?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("denom" in data && data.denom != undefined) {
                    this.denom = data.denom;
                }
            }
        }
        get denom() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set denom(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            denom?: string;
        }): QueryDenomToERC20Request {
            const message = new QueryDenomToERC20Request({});
            if (data.denom != null) {
                message.denom = data.denom;
            }
            return message;
        }
        toObject() {
            const data: {
                denom?: string;
            } = {};
            if (this.denom != null) {
                data.denom = this.denom;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.denom.length)
                writer.writeString(1, this.denom);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryDenomToERC20Request {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryDenomToERC20Request();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.denom = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryDenomToERC20Request {
            return QueryDenomToERC20Request.deserialize(bytes);
        }
    }
    export class QueryDenomToERC20Response extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            erc20?: string;
            cosmos_originated?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("erc20" in data && data.erc20 != undefined) {
                    this.erc20 = data.erc20;
                }
                if ("cosmos_originated" in data && data.cosmos_originated != undefined) {
                    this.cosmos_originated = data.cosmos_originated;
                }
            }
        }
        get erc20() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set erc20(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get cosmos_originated() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set cosmos_originated(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            erc20?: string;
            cosmos_originated?: boolean;
        }): QueryDenomToERC20Response {
            const message = new QueryDenomToERC20Response({});
            if (data.erc20 != null) {
                message.erc20 = data.erc20;
            }
            if (data.cosmos_originated != null) {
                message.cosmos_originated = data.cosmos_originated;
            }
            return message;
        }
        toObject() {
            const data: {
                erc20?: string;
                cosmos_originated?: boolean;
            } = {};
            if (this.erc20 != null) {
                data.erc20 = this.erc20;
            }
            if (this.cosmos_originated != null) {
                data.cosmos_originated = this.cosmos_originated;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.erc20.length)
                writer.writeString(1, this.erc20);
            if (this.cosmos_originated != false)
                writer.writeBool(2, this.cosmos_originated);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryDenomToERC20Response {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryDenomToERC20Response();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.erc20 = reader.readString();
                        break;
                    case 2:
                        message.cosmos_originated = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryDenomToERC20Response {
            return QueryDenomToERC20Response.deserialize(bytes);
        }
    }
    export class QueryAttestationsRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            limit?: number;
            order_by?: string;
            claim_type?: string;
            nonce?: number;
            height?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("limit" in data && data.limit != undefined) {
                    this.limit = data.limit;
                }
                if ("order_by" in data && data.order_by != undefined) {
                    this.order_by = data.order_by;
                }
                if ("claim_type" in data && data.claim_type != undefined) {
                    this.claim_type = data.claim_type;
                }
                if ("nonce" in data && data.nonce != undefined) {
                    this.nonce = data.nonce;
                }
                if ("height" in data && data.height != undefined) {
                    this.height = data.height;
                }
            }
        }
        get limit() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set limit(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get order_by() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set order_by(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get claim_type() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set claim_type(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get nonce() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set nonce(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get height() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set height(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            limit?: number;
            order_by?: string;
            claim_type?: string;
            nonce?: number;
            height?: number;
        }): QueryAttestationsRequest {
            const message = new QueryAttestationsRequest({});
            if (data.limit != null) {
                message.limit = data.limit;
            }
            if (data.order_by != null) {
                message.order_by = data.order_by;
            }
            if (data.claim_type != null) {
                message.claim_type = data.claim_type;
            }
            if (data.nonce != null) {
                message.nonce = data.nonce;
            }
            if (data.height != null) {
                message.height = data.height;
            }
            return message;
        }
        toObject() {
            const data: {
                limit?: number;
                order_by?: string;
                claim_type?: string;
                nonce?: number;
                height?: number;
            } = {};
            if (this.limit != null) {
                data.limit = this.limit;
            }
            if (this.order_by != null) {
                data.order_by = this.order_by;
            }
            if (this.claim_type != null) {
                data.claim_type = this.claim_type;
            }
            if (this.nonce != null) {
                data.nonce = this.nonce;
            }
            if (this.height != null) {
                data.height = this.height;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.limit != 0)
                writer.writeUint64(1, this.limit);
            if (this.order_by.length)
                writer.writeString(2, this.order_by);
            if (this.claim_type.length)
                writer.writeString(3, this.claim_type);
            if (this.nonce != 0)
                writer.writeUint64(4, this.nonce);
            if (this.height != 0)
                writer.writeUint64(5, this.height);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryAttestationsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryAttestationsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.limit = reader.readUint64();
                        break;
                    case 2:
                        message.order_by = reader.readString();
                        break;
                    case 3:
                        message.claim_type = reader.readString();
                        break;
                    case 4:
                        message.nonce = reader.readUint64();
                        break;
                    case 5:
                        message.height = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryAttestationsRequest {
            return QueryAttestationsRequest.deserialize(bytes);
        }
    }
    export class QueryAttestationsResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            attestations?: dependency_6.gravity.v1.Attestation[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("attestations" in data && data.attestations != undefined) {
                    this.attestations = data.attestations;
                }
            }
        }
        get attestations() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_6.gravity.v1.Attestation, 1) as dependency_6.gravity.v1.Attestation[];
        }
        set attestations(value: dependency_6.gravity.v1.Attestation[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        static fromObject(data: {
            attestations?: ReturnType<typeof dependency_6.gravity.v1.Attestation.prototype.toObject>[];
        }): QueryAttestationsResponse {
            const message = new QueryAttestationsResponse({});
            if (data.attestations != null) {
                message.attestations = data.attestations.map(item => dependency_6.gravity.v1.Attestation.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                attestations?: ReturnType<typeof dependency_6.gravity.v1.Attestation.prototype.toObject>[];
            } = {};
            if (this.attestations != null) {
                data.attestations = this.attestations.map((item: dependency_6.gravity.v1.Attestation) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.attestations.length)
                writer.writeRepeatedMessage(1, this.attestations, (item: dependency_6.gravity.v1.Attestation) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryAttestationsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryAttestationsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.attestations, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_6.gravity.v1.Attestation.deserialize(reader), dependency_6.gravity.v1.Attestation));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryAttestationsResponse {
            return QueryAttestationsResponse.deserialize(bytes);
        }
    }
    export class QueryDelegateKeysByValidatorAddress extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            validator_address?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("validator_address" in data && data.validator_address != undefined) {
                    this.validator_address = data.validator_address;
                }
            }
        }
        get validator_address() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set validator_address(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            validator_address?: string;
        }): QueryDelegateKeysByValidatorAddress {
            const message = new QueryDelegateKeysByValidatorAddress({});
            if (data.validator_address != null) {
                message.validator_address = data.validator_address;
            }
            return message;
        }
        toObject() {
            const data: {
                validator_address?: string;
            } = {};
            if (this.validator_address != null) {
                data.validator_address = this.validator_address;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.validator_address.length)
                writer.writeString(1, this.validator_address);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryDelegateKeysByValidatorAddress {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryDelegateKeysByValidatorAddress();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.validator_address = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryDelegateKeysByValidatorAddress {
            return QueryDelegateKeysByValidatorAddress.deserialize(bytes);
        }
    }
    export class QueryDelegateKeysByValidatorAddressResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            eth_address?: string;
            orchestrator_address?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("eth_address" in data && data.eth_address != undefined) {
                    this.eth_address = data.eth_address;
                }
                if ("orchestrator_address" in data && data.orchestrator_address != undefined) {
                    this.orchestrator_address = data.orchestrator_address;
                }
            }
        }
        get eth_address() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set eth_address(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get orchestrator_address() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set orchestrator_address(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            eth_address?: string;
            orchestrator_address?: string;
        }): QueryDelegateKeysByValidatorAddressResponse {
            const message = new QueryDelegateKeysByValidatorAddressResponse({});
            if (data.eth_address != null) {
                message.eth_address = data.eth_address;
            }
            if (data.orchestrator_address != null) {
                message.orchestrator_address = data.orchestrator_address;
            }
            return message;
        }
        toObject() {
            const data: {
                eth_address?: string;
                orchestrator_address?: string;
            } = {};
            if (this.eth_address != null) {
                data.eth_address = this.eth_address;
            }
            if (this.orchestrator_address != null) {
                data.orchestrator_address = this.orchestrator_address;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.eth_address.length)
                writer.writeString(1, this.eth_address);
            if (this.orchestrator_address.length)
                writer.writeString(2, this.orchestrator_address);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryDelegateKeysByValidatorAddressResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryDelegateKeysByValidatorAddressResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.eth_address = reader.readString();
                        break;
                    case 2:
                        message.orchestrator_address = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryDelegateKeysByValidatorAddressResponse {
            return QueryDelegateKeysByValidatorAddressResponse.deserialize(bytes);
        }
    }
    export class QueryDelegateKeysByEthAddress extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            eth_address?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("eth_address" in data && data.eth_address != undefined) {
                    this.eth_address = data.eth_address;
                }
            }
        }
        get eth_address() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set eth_address(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            eth_address?: string;
        }): QueryDelegateKeysByEthAddress {
            const message = new QueryDelegateKeysByEthAddress({});
            if (data.eth_address != null) {
                message.eth_address = data.eth_address;
            }
            return message;
        }
        toObject() {
            const data: {
                eth_address?: string;
            } = {};
            if (this.eth_address != null) {
                data.eth_address = this.eth_address;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.eth_address.length)
                writer.writeString(1, this.eth_address);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryDelegateKeysByEthAddress {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryDelegateKeysByEthAddress();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.eth_address = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryDelegateKeysByEthAddress {
            return QueryDelegateKeysByEthAddress.deserialize(bytes);
        }
    }
    export class QueryDelegateKeysByEthAddressResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            validator_address?: string;
            orchestrator_address?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("validator_address" in data && data.validator_address != undefined) {
                    this.validator_address = data.validator_address;
                }
                if ("orchestrator_address" in data && data.orchestrator_address != undefined) {
                    this.orchestrator_address = data.orchestrator_address;
                }
            }
        }
        get validator_address() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set validator_address(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get orchestrator_address() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set orchestrator_address(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            validator_address?: string;
            orchestrator_address?: string;
        }): QueryDelegateKeysByEthAddressResponse {
            const message = new QueryDelegateKeysByEthAddressResponse({});
            if (data.validator_address != null) {
                message.validator_address = data.validator_address;
            }
            if (data.orchestrator_address != null) {
                message.orchestrator_address = data.orchestrator_address;
            }
            return message;
        }
        toObject() {
            const data: {
                validator_address?: string;
                orchestrator_address?: string;
            } = {};
            if (this.validator_address != null) {
                data.validator_address = this.validator_address;
            }
            if (this.orchestrator_address != null) {
                data.orchestrator_address = this.orchestrator_address;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.validator_address.length)
                writer.writeString(1, this.validator_address);
            if (this.orchestrator_address.length)
                writer.writeString(2, this.orchestrator_address);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryDelegateKeysByEthAddressResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryDelegateKeysByEthAddressResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.validator_address = reader.readString();
                        break;
                    case 2:
                        message.orchestrator_address = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryDelegateKeysByEthAddressResponse {
            return QueryDelegateKeysByEthAddressResponse.deserialize(bytes);
        }
    }
    export class QueryDelegateKeysByOrchestratorAddress extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            orchestrator_address?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("orchestrator_address" in data && data.orchestrator_address != undefined) {
                    this.orchestrator_address = data.orchestrator_address;
                }
            }
        }
        get orchestrator_address() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set orchestrator_address(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            orchestrator_address?: string;
        }): QueryDelegateKeysByOrchestratorAddress {
            const message = new QueryDelegateKeysByOrchestratorAddress({});
            if (data.orchestrator_address != null) {
                message.orchestrator_address = data.orchestrator_address;
            }
            return message;
        }
        toObject() {
            const data: {
                orchestrator_address?: string;
            } = {};
            if (this.orchestrator_address != null) {
                data.orchestrator_address = this.orchestrator_address;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.orchestrator_address.length)
                writer.writeString(1, this.orchestrator_address);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryDelegateKeysByOrchestratorAddress {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryDelegateKeysByOrchestratorAddress();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.orchestrator_address = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryDelegateKeysByOrchestratorAddress {
            return QueryDelegateKeysByOrchestratorAddress.deserialize(bytes);
        }
    }
    export class QueryDelegateKeysByOrchestratorAddressResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            validator_address?: string;
            eth_address?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("validator_address" in data && data.validator_address != undefined) {
                    this.validator_address = data.validator_address;
                }
                if ("eth_address" in data && data.eth_address != undefined) {
                    this.eth_address = data.eth_address;
                }
            }
        }
        get validator_address() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set validator_address(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get eth_address() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set eth_address(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            validator_address?: string;
            eth_address?: string;
        }): QueryDelegateKeysByOrchestratorAddressResponse {
            const message = new QueryDelegateKeysByOrchestratorAddressResponse({});
            if (data.validator_address != null) {
                message.validator_address = data.validator_address;
            }
            if (data.eth_address != null) {
                message.eth_address = data.eth_address;
            }
            return message;
        }
        toObject() {
            const data: {
                validator_address?: string;
                eth_address?: string;
            } = {};
            if (this.validator_address != null) {
                data.validator_address = this.validator_address;
            }
            if (this.eth_address != null) {
                data.eth_address = this.eth_address;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.validator_address.length)
                writer.writeString(1, this.validator_address);
            if (this.eth_address.length)
                writer.writeString(2, this.eth_address);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryDelegateKeysByOrchestratorAddressResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryDelegateKeysByOrchestratorAddressResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.validator_address = reader.readString();
                        break;
                    case 2:
                        message.eth_address = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryDelegateKeysByOrchestratorAddressResponse {
            return QueryDelegateKeysByOrchestratorAddressResponse.deserialize(bytes);
        }
    }
    export class QueryPendingSendToEth extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            sender_address?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("sender_address" in data && data.sender_address != undefined) {
                    this.sender_address = data.sender_address;
                }
            }
        }
        get sender_address() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set sender_address(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            sender_address?: string;
        }): QueryPendingSendToEth {
            const message = new QueryPendingSendToEth({});
            if (data.sender_address != null) {
                message.sender_address = data.sender_address;
            }
            return message;
        }
        toObject() {
            const data: {
                sender_address?: string;
            } = {};
            if (this.sender_address != null) {
                data.sender_address = this.sender_address;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sender_address.length)
                writer.writeString(1, this.sender_address);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryPendingSendToEth {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryPendingSendToEth();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sender_address = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryPendingSendToEth {
            return QueryPendingSendToEth.deserialize(bytes);
        }
    }
    export class QueryPendingSendToEthResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            transfers_in_batches?: dependency_5.gravity.v1.OutgoingTransferTx[];
            unbatched_transfers?: dependency_5.gravity.v1.OutgoingTransferTx[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1, 2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("transfers_in_batches" in data && data.transfers_in_batches != undefined) {
                    this.transfers_in_batches = data.transfers_in_batches;
                }
                if ("unbatched_transfers" in data && data.unbatched_transfers != undefined) {
                    this.unbatched_transfers = data.unbatched_transfers;
                }
            }
        }
        get transfers_in_batches() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_5.gravity.v1.OutgoingTransferTx, 1) as dependency_5.gravity.v1.OutgoingTransferTx[];
        }
        set transfers_in_batches(value: dependency_5.gravity.v1.OutgoingTransferTx[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get unbatched_transfers() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_5.gravity.v1.OutgoingTransferTx, 2) as dependency_5.gravity.v1.OutgoingTransferTx[];
        }
        set unbatched_transfers(value: dependency_5.gravity.v1.OutgoingTransferTx[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        static fromObject(data: {
            transfers_in_batches?: ReturnType<typeof dependency_5.gravity.v1.OutgoingTransferTx.prototype.toObject>[];
            unbatched_transfers?: ReturnType<typeof dependency_5.gravity.v1.OutgoingTransferTx.prototype.toObject>[];
        }): QueryPendingSendToEthResponse {
            const message = new QueryPendingSendToEthResponse({});
            if (data.transfers_in_batches != null) {
                message.transfers_in_batches = data.transfers_in_batches.map(item => dependency_5.gravity.v1.OutgoingTransferTx.fromObject(item));
            }
            if (data.unbatched_transfers != null) {
                message.unbatched_transfers = data.unbatched_transfers.map(item => dependency_5.gravity.v1.OutgoingTransferTx.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                transfers_in_batches?: ReturnType<typeof dependency_5.gravity.v1.OutgoingTransferTx.prototype.toObject>[];
                unbatched_transfers?: ReturnType<typeof dependency_5.gravity.v1.OutgoingTransferTx.prototype.toObject>[];
            } = {};
            if (this.transfers_in_batches != null) {
                data.transfers_in_batches = this.transfers_in_batches.map((item: dependency_5.gravity.v1.OutgoingTransferTx) => item.toObject());
            }
            if (this.unbatched_transfers != null) {
                data.unbatched_transfers = this.unbatched_transfers.map((item: dependency_5.gravity.v1.OutgoingTransferTx) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.transfers_in_batches.length)
                writer.writeRepeatedMessage(1, this.transfers_in_batches, (item: dependency_5.gravity.v1.OutgoingTransferTx) => item.serialize(writer));
            if (this.unbatched_transfers.length)
                writer.writeRepeatedMessage(2, this.unbatched_transfers, (item: dependency_5.gravity.v1.OutgoingTransferTx) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryPendingSendToEthResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryPendingSendToEthResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.transfers_in_batches, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_5.gravity.v1.OutgoingTransferTx.deserialize(reader), dependency_5.gravity.v1.OutgoingTransferTx));
                        break;
                    case 2:
                        reader.readMessage(message.unbatched_transfers, () => pb_1.Message.addToRepeatedWrapperField(message, 2, dependency_5.gravity.v1.OutgoingTransferTx.deserialize(reader), dependency_5.gravity.v1.OutgoingTransferTx));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryPendingSendToEthResponse {
            return QueryPendingSendToEthResponse.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedQueryService {
        static definition = {
            Params: {
                path: "/gravity.v1.Query/Params",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: QueryParamsRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => QueryParamsRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: QueryParamsResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => QueryParamsResponse.deserialize(new Uint8Array(bytes))
            },
            CurrentValset: {
                path: "/gravity.v1.Query/CurrentValset",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: QueryCurrentValsetRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => QueryCurrentValsetRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: QueryCurrentValsetResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => QueryCurrentValsetResponse.deserialize(new Uint8Array(bytes))
            },
            ValsetRequest: {
                path: "/gravity.v1.Query/ValsetRequest",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: QueryValsetRequestRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => QueryValsetRequestRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: QueryValsetRequestResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => QueryValsetRequestResponse.deserialize(new Uint8Array(bytes))
            },
            ValsetConfirm: {
                path: "/gravity.v1.Query/ValsetConfirm",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: QueryValsetConfirmRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => QueryValsetConfirmRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: QueryValsetConfirmResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => QueryValsetConfirmResponse.deserialize(new Uint8Array(bytes))
            },
            ValsetConfirmsByNonce: {
                path: "/gravity.v1.Query/ValsetConfirmsByNonce",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: QueryValsetConfirmsByNonceRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => QueryValsetConfirmsByNonceRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: QueryValsetConfirmsByNonceResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => QueryValsetConfirmsByNonceResponse.deserialize(new Uint8Array(bytes))
            },
            LastValsetRequests: {
                path: "/gravity.v1.Query/LastValsetRequests",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: QueryLastValsetRequestsRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => QueryLastValsetRequestsRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: QueryLastValsetRequestsResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => QueryLastValsetRequestsResponse.deserialize(new Uint8Array(bytes))
            },
            LastPendingValsetRequestByAddr: {
                path: "/gravity.v1.Query/LastPendingValsetRequestByAddr",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: QueryLastPendingValsetRequestByAddrRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => QueryLastPendingValsetRequestByAddrRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: QueryLastPendingValsetRequestByAddrResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => QueryLastPendingValsetRequestByAddrResponse.deserialize(new Uint8Array(bytes))
            },
            LastPendingBatchRequestByAddr: {
                path: "/gravity.v1.Query/LastPendingBatchRequestByAddr",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: QueryLastPendingBatchRequestByAddrRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => QueryLastPendingBatchRequestByAddrRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: QueryLastPendingBatchRequestByAddrResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => QueryLastPendingBatchRequestByAddrResponse.deserialize(new Uint8Array(bytes))
            },
            LastPendingLogicCallByAddr: {
                path: "/gravity.v1.Query/LastPendingLogicCallByAddr",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: QueryLastPendingLogicCallByAddrRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => QueryLastPendingLogicCallByAddrRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: QueryLastPendingLogicCallByAddrResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => QueryLastPendingLogicCallByAddrResponse.deserialize(new Uint8Array(bytes))
            },
            LastEventNonceByAddr: {
                path: "/gravity.v1.Query/LastEventNonceByAddr",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: QueryLastEventNonceByAddrRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => QueryLastEventNonceByAddrRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: QueryLastEventNonceByAddrResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => QueryLastEventNonceByAddrResponse.deserialize(new Uint8Array(bytes))
            },
            BatchFees: {
                path: "/gravity.v1.Query/BatchFees",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: QueryBatchFeeRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => QueryBatchFeeRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: QueryBatchFeeResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => QueryBatchFeeResponse.deserialize(new Uint8Array(bytes))
            },
            OutgoingTxBatches: {
                path: "/gravity.v1.Query/OutgoingTxBatches",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: QueryOutgoingTxBatchesRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => QueryOutgoingTxBatchesRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: QueryOutgoingTxBatchesResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => QueryOutgoingTxBatchesResponse.deserialize(new Uint8Array(bytes))
            },
            OutgoingLogicCalls: {
                path: "/gravity.v1.Query/OutgoingLogicCalls",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: QueryOutgoingLogicCallsRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => QueryOutgoingLogicCallsRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: QueryOutgoingLogicCallsResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => QueryOutgoingLogicCallsResponse.deserialize(new Uint8Array(bytes))
            },
            BatchRequestByNonce: {
                path: "/gravity.v1.Query/BatchRequestByNonce",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: QueryBatchRequestByNonceRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => QueryBatchRequestByNonceRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: QueryBatchRequestByNonceResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => QueryBatchRequestByNonceResponse.deserialize(new Uint8Array(bytes))
            },
            BatchConfirms: {
                path: "/gravity.v1.Query/BatchConfirms",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: QueryBatchConfirmsRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => QueryBatchConfirmsRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: QueryBatchConfirmsResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => QueryBatchConfirmsResponse.deserialize(new Uint8Array(bytes))
            },
            LogicConfirms: {
                path: "/gravity.v1.Query/LogicConfirms",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: QueryLogicConfirmsRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => QueryLogicConfirmsRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: QueryLogicConfirmsResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => QueryLogicConfirmsResponse.deserialize(new Uint8Array(bytes))
            },
            ERC20ToDenom: {
                path: "/gravity.v1.Query/ERC20ToDenom",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: QueryERC20ToDenomRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => QueryERC20ToDenomRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: QueryERC20ToDenomResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => QueryERC20ToDenomResponse.deserialize(new Uint8Array(bytes))
            },
            DenomToERC20: {
                path: "/gravity.v1.Query/DenomToERC20",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: QueryDenomToERC20Request) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => QueryDenomToERC20Request.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: QueryDenomToERC20Response) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => QueryDenomToERC20Response.deserialize(new Uint8Array(bytes))
            },
            GetAttestations: {
                path: "/gravity.v1.Query/GetAttestations",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: QueryAttestationsRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => QueryAttestationsRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: QueryAttestationsResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => QueryAttestationsResponse.deserialize(new Uint8Array(bytes))
            },
            GetDelegateKeyByValidator: {
                path: "/gravity.v1.Query/GetDelegateKeyByValidator",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: QueryDelegateKeysByValidatorAddress) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => QueryDelegateKeysByValidatorAddress.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: QueryDelegateKeysByValidatorAddressResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => QueryDelegateKeysByValidatorAddressResponse.deserialize(new Uint8Array(bytes))
            },
            GetDelegateKeyByEth: {
                path: "/gravity.v1.Query/GetDelegateKeyByEth",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: QueryDelegateKeysByEthAddress) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => QueryDelegateKeysByEthAddress.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: QueryDelegateKeysByEthAddressResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => QueryDelegateKeysByEthAddressResponse.deserialize(new Uint8Array(bytes))
            },
            GetDelegateKeyByOrchestrator: {
                path: "/gravity.v1.Query/GetDelegateKeyByOrchestrator",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: QueryDelegateKeysByOrchestratorAddress) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => QueryDelegateKeysByOrchestratorAddress.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: QueryDelegateKeysByOrchestratorAddressResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => QueryDelegateKeysByOrchestratorAddressResponse.deserialize(new Uint8Array(bytes))
            },
            GetPendingSendToEth: {
                path: "/gravity.v1.Query/GetPendingSendToEth",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: QueryPendingSendToEth) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => QueryPendingSendToEth.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: QueryPendingSendToEthResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => QueryPendingSendToEthResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract Params(call: grpc_1.ServerUnaryCall<QueryParamsRequest, QueryParamsResponse>, callback: grpc_1.sendUnaryData<QueryParamsResponse>): void;
        abstract CurrentValset(call: grpc_1.ServerUnaryCall<QueryCurrentValsetRequest, QueryCurrentValsetResponse>, callback: grpc_1.sendUnaryData<QueryCurrentValsetResponse>): void;
        abstract ValsetRequest(call: grpc_1.ServerUnaryCall<QueryValsetRequestRequest, QueryValsetRequestResponse>, callback: grpc_1.sendUnaryData<QueryValsetRequestResponse>): void;
        abstract ValsetConfirm(call: grpc_1.ServerUnaryCall<QueryValsetConfirmRequest, QueryValsetConfirmResponse>, callback: grpc_1.sendUnaryData<QueryValsetConfirmResponse>): void;
        abstract ValsetConfirmsByNonce(call: grpc_1.ServerUnaryCall<QueryValsetConfirmsByNonceRequest, QueryValsetConfirmsByNonceResponse>, callback: grpc_1.sendUnaryData<QueryValsetConfirmsByNonceResponse>): void;
        abstract LastValsetRequests(call: grpc_1.ServerUnaryCall<QueryLastValsetRequestsRequest, QueryLastValsetRequestsResponse>, callback: grpc_1.sendUnaryData<QueryLastValsetRequestsResponse>): void;
        abstract LastPendingValsetRequestByAddr(call: grpc_1.ServerUnaryCall<QueryLastPendingValsetRequestByAddrRequest, QueryLastPendingValsetRequestByAddrResponse>, callback: grpc_1.sendUnaryData<QueryLastPendingValsetRequestByAddrResponse>): void;
        abstract LastPendingBatchRequestByAddr(call: grpc_1.ServerUnaryCall<QueryLastPendingBatchRequestByAddrRequest, QueryLastPendingBatchRequestByAddrResponse>, callback: grpc_1.sendUnaryData<QueryLastPendingBatchRequestByAddrResponse>): void;
        abstract LastPendingLogicCallByAddr(call: grpc_1.ServerUnaryCall<QueryLastPendingLogicCallByAddrRequest, QueryLastPendingLogicCallByAddrResponse>, callback: grpc_1.sendUnaryData<QueryLastPendingLogicCallByAddrResponse>): void;
        abstract LastEventNonceByAddr(call: grpc_1.ServerUnaryCall<QueryLastEventNonceByAddrRequest, QueryLastEventNonceByAddrResponse>, callback: grpc_1.sendUnaryData<QueryLastEventNonceByAddrResponse>): void;
        abstract BatchFees(call: grpc_1.ServerUnaryCall<QueryBatchFeeRequest, QueryBatchFeeResponse>, callback: grpc_1.sendUnaryData<QueryBatchFeeResponse>): void;
        abstract OutgoingTxBatches(call: grpc_1.ServerUnaryCall<QueryOutgoingTxBatchesRequest, QueryOutgoingTxBatchesResponse>, callback: grpc_1.sendUnaryData<QueryOutgoingTxBatchesResponse>): void;
        abstract OutgoingLogicCalls(call: grpc_1.ServerUnaryCall<QueryOutgoingLogicCallsRequest, QueryOutgoingLogicCallsResponse>, callback: grpc_1.sendUnaryData<QueryOutgoingLogicCallsResponse>): void;
        abstract BatchRequestByNonce(call: grpc_1.ServerUnaryCall<QueryBatchRequestByNonceRequest, QueryBatchRequestByNonceResponse>, callback: grpc_1.sendUnaryData<QueryBatchRequestByNonceResponse>): void;
        abstract BatchConfirms(call: grpc_1.ServerUnaryCall<QueryBatchConfirmsRequest, QueryBatchConfirmsResponse>, callback: grpc_1.sendUnaryData<QueryBatchConfirmsResponse>): void;
        abstract LogicConfirms(call: grpc_1.ServerUnaryCall<QueryLogicConfirmsRequest, QueryLogicConfirmsResponse>, callback: grpc_1.sendUnaryData<QueryLogicConfirmsResponse>): void;
        abstract ERC20ToDenom(call: grpc_1.ServerUnaryCall<QueryERC20ToDenomRequest, QueryERC20ToDenomResponse>, callback: grpc_1.sendUnaryData<QueryERC20ToDenomResponse>): void;
        abstract DenomToERC20(call: grpc_1.ServerUnaryCall<QueryDenomToERC20Request, QueryDenomToERC20Response>, callback: grpc_1.sendUnaryData<QueryDenomToERC20Response>): void;
        abstract GetAttestations(call: grpc_1.ServerUnaryCall<QueryAttestationsRequest, QueryAttestationsResponse>, callback: grpc_1.sendUnaryData<QueryAttestationsResponse>): void;
        abstract GetDelegateKeyByValidator(call: grpc_1.ServerUnaryCall<QueryDelegateKeysByValidatorAddress, QueryDelegateKeysByValidatorAddressResponse>, callback: grpc_1.sendUnaryData<QueryDelegateKeysByValidatorAddressResponse>): void;
        abstract GetDelegateKeyByEth(call: grpc_1.ServerUnaryCall<QueryDelegateKeysByEthAddress, QueryDelegateKeysByEthAddressResponse>, callback: grpc_1.sendUnaryData<QueryDelegateKeysByEthAddressResponse>): void;
        abstract GetDelegateKeyByOrchestrator(call: grpc_1.ServerUnaryCall<QueryDelegateKeysByOrchestratorAddress, QueryDelegateKeysByOrchestratorAddressResponse>, callback: grpc_1.sendUnaryData<QueryDelegateKeysByOrchestratorAddressResponse>): void;
        abstract GetPendingSendToEth(call: grpc_1.ServerUnaryCall<QueryPendingSendToEth, QueryPendingSendToEthResponse>, callback: grpc_1.sendUnaryData<QueryPendingSendToEthResponse>): void;
    }
    export class QueryClient extends grpc_1.makeGenericClientConstructor(UnimplementedQueryService.definition, "Query", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        Params: GrpcUnaryServiceInterface<QueryParamsRequest, QueryParamsResponse> = (message: QueryParamsRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<QueryParamsResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<QueryParamsResponse>, callback?: grpc_1.requestCallback<QueryParamsResponse>): grpc_1.ClientUnaryCall => {
            return super.Params(message, metadata, options, callback);
        };
        CurrentValset: GrpcUnaryServiceInterface<QueryCurrentValsetRequest, QueryCurrentValsetResponse> = (message: QueryCurrentValsetRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<QueryCurrentValsetResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<QueryCurrentValsetResponse>, callback?: grpc_1.requestCallback<QueryCurrentValsetResponse>): grpc_1.ClientUnaryCall => {
            return super.CurrentValset(message, metadata, options, callback);
        };
        ValsetRequest: GrpcUnaryServiceInterface<QueryValsetRequestRequest, QueryValsetRequestResponse> = (message: QueryValsetRequestRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<QueryValsetRequestResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<QueryValsetRequestResponse>, callback?: grpc_1.requestCallback<QueryValsetRequestResponse>): grpc_1.ClientUnaryCall => {
            return super.ValsetRequest(message, metadata, options, callback);
        };
        ValsetConfirm: GrpcUnaryServiceInterface<QueryValsetConfirmRequest, QueryValsetConfirmResponse> = (message: QueryValsetConfirmRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<QueryValsetConfirmResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<QueryValsetConfirmResponse>, callback?: grpc_1.requestCallback<QueryValsetConfirmResponse>): grpc_1.ClientUnaryCall => {
            return super.ValsetConfirm(message, metadata, options, callback);
        };
        ValsetConfirmsByNonce: GrpcUnaryServiceInterface<QueryValsetConfirmsByNonceRequest, QueryValsetConfirmsByNonceResponse> = (message: QueryValsetConfirmsByNonceRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<QueryValsetConfirmsByNonceResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<QueryValsetConfirmsByNonceResponse>, callback?: grpc_1.requestCallback<QueryValsetConfirmsByNonceResponse>): grpc_1.ClientUnaryCall => {
            return super.ValsetConfirmsByNonce(message, metadata, options, callback);
        };
        LastValsetRequests: GrpcUnaryServiceInterface<QueryLastValsetRequestsRequest, QueryLastValsetRequestsResponse> = (message: QueryLastValsetRequestsRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<QueryLastValsetRequestsResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<QueryLastValsetRequestsResponse>, callback?: grpc_1.requestCallback<QueryLastValsetRequestsResponse>): grpc_1.ClientUnaryCall => {
            return super.LastValsetRequests(message, metadata, options, callback);
        };
        LastPendingValsetRequestByAddr: GrpcUnaryServiceInterface<QueryLastPendingValsetRequestByAddrRequest, QueryLastPendingValsetRequestByAddrResponse> = (message: QueryLastPendingValsetRequestByAddrRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<QueryLastPendingValsetRequestByAddrResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<QueryLastPendingValsetRequestByAddrResponse>, callback?: grpc_1.requestCallback<QueryLastPendingValsetRequestByAddrResponse>): grpc_1.ClientUnaryCall => {
            return super.LastPendingValsetRequestByAddr(message, metadata, options, callback);
        };
        LastPendingBatchRequestByAddr: GrpcUnaryServiceInterface<QueryLastPendingBatchRequestByAddrRequest, QueryLastPendingBatchRequestByAddrResponse> = (message: QueryLastPendingBatchRequestByAddrRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<QueryLastPendingBatchRequestByAddrResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<QueryLastPendingBatchRequestByAddrResponse>, callback?: grpc_1.requestCallback<QueryLastPendingBatchRequestByAddrResponse>): grpc_1.ClientUnaryCall => {
            return super.LastPendingBatchRequestByAddr(message, metadata, options, callback);
        };
        LastPendingLogicCallByAddr: GrpcUnaryServiceInterface<QueryLastPendingLogicCallByAddrRequest, QueryLastPendingLogicCallByAddrResponse> = (message: QueryLastPendingLogicCallByAddrRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<QueryLastPendingLogicCallByAddrResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<QueryLastPendingLogicCallByAddrResponse>, callback?: grpc_1.requestCallback<QueryLastPendingLogicCallByAddrResponse>): grpc_1.ClientUnaryCall => {
            return super.LastPendingLogicCallByAddr(message, metadata, options, callback);
        };
        LastEventNonceByAddr: GrpcUnaryServiceInterface<QueryLastEventNonceByAddrRequest, QueryLastEventNonceByAddrResponse> = (message: QueryLastEventNonceByAddrRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<QueryLastEventNonceByAddrResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<QueryLastEventNonceByAddrResponse>, callback?: grpc_1.requestCallback<QueryLastEventNonceByAddrResponse>): grpc_1.ClientUnaryCall => {
            return super.LastEventNonceByAddr(message, metadata, options, callback);
        };
        BatchFees: GrpcUnaryServiceInterface<QueryBatchFeeRequest, QueryBatchFeeResponse> = (message: QueryBatchFeeRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<QueryBatchFeeResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<QueryBatchFeeResponse>, callback?: grpc_1.requestCallback<QueryBatchFeeResponse>): grpc_1.ClientUnaryCall => {
            return super.BatchFees(message, metadata, options, callback);
        };
        OutgoingTxBatches: GrpcUnaryServiceInterface<QueryOutgoingTxBatchesRequest, QueryOutgoingTxBatchesResponse> = (message: QueryOutgoingTxBatchesRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<QueryOutgoingTxBatchesResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<QueryOutgoingTxBatchesResponse>, callback?: grpc_1.requestCallback<QueryOutgoingTxBatchesResponse>): grpc_1.ClientUnaryCall => {
            return super.OutgoingTxBatches(message, metadata, options, callback);
        };
        OutgoingLogicCalls: GrpcUnaryServiceInterface<QueryOutgoingLogicCallsRequest, QueryOutgoingLogicCallsResponse> = (message: QueryOutgoingLogicCallsRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<QueryOutgoingLogicCallsResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<QueryOutgoingLogicCallsResponse>, callback?: grpc_1.requestCallback<QueryOutgoingLogicCallsResponse>): grpc_1.ClientUnaryCall => {
            return super.OutgoingLogicCalls(message, metadata, options, callback);
        };
        BatchRequestByNonce: GrpcUnaryServiceInterface<QueryBatchRequestByNonceRequest, QueryBatchRequestByNonceResponse> = (message: QueryBatchRequestByNonceRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<QueryBatchRequestByNonceResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<QueryBatchRequestByNonceResponse>, callback?: grpc_1.requestCallback<QueryBatchRequestByNonceResponse>): grpc_1.ClientUnaryCall => {
            return super.BatchRequestByNonce(message, metadata, options, callback);
        };
        BatchConfirms: GrpcUnaryServiceInterface<QueryBatchConfirmsRequest, QueryBatchConfirmsResponse> = (message: QueryBatchConfirmsRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<QueryBatchConfirmsResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<QueryBatchConfirmsResponse>, callback?: grpc_1.requestCallback<QueryBatchConfirmsResponse>): grpc_1.ClientUnaryCall => {
            return super.BatchConfirms(message, metadata, options, callback);
        };
        LogicConfirms: GrpcUnaryServiceInterface<QueryLogicConfirmsRequest, QueryLogicConfirmsResponse> = (message: QueryLogicConfirmsRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<QueryLogicConfirmsResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<QueryLogicConfirmsResponse>, callback?: grpc_1.requestCallback<QueryLogicConfirmsResponse>): grpc_1.ClientUnaryCall => {
            return super.LogicConfirms(message, metadata, options, callback);
        };
        ERC20ToDenom: GrpcUnaryServiceInterface<QueryERC20ToDenomRequest, QueryERC20ToDenomResponse> = (message: QueryERC20ToDenomRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<QueryERC20ToDenomResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<QueryERC20ToDenomResponse>, callback?: grpc_1.requestCallback<QueryERC20ToDenomResponse>): grpc_1.ClientUnaryCall => {
            return super.ERC20ToDenom(message, metadata, options, callback);
        };
        DenomToERC20: GrpcUnaryServiceInterface<QueryDenomToERC20Request, QueryDenomToERC20Response> = (message: QueryDenomToERC20Request, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<QueryDenomToERC20Response>, options?: grpc_1.CallOptions | grpc_1.requestCallback<QueryDenomToERC20Response>, callback?: grpc_1.requestCallback<QueryDenomToERC20Response>): grpc_1.ClientUnaryCall => {
            return super.DenomToERC20(message, metadata, options, callback);
        };
        GetAttestations: GrpcUnaryServiceInterface<QueryAttestationsRequest, QueryAttestationsResponse> = (message: QueryAttestationsRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<QueryAttestationsResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<QueryAttestationsResponse>, callback?: grpc_1.requestCallback<QueryAttestationsResponse>): grpc_1.ClientUnaryCall => {
            return super.GetAttestations(message, metadata, options, callback);
        };
        GetDelegateKeyByValidator: GrpcUnaryServiceInterface<QueryDelegateKeysByValidatorAddress, QueryDelegateKeysByValidatorAddressResponse> = (message: QueryDelegateKeysByValidatorAddress, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<QueryDelegateKeysByValidatorAddressResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<QueryDelegateKeysByValidatorAddressResponse>, callback?: grpc_1.requestCallback<QueryDelegateKeysByValidatorAddressResponse>): grpc_1.ClientUnaryCall => {
            return super.GetDelegateKeyByValidator(message, metadata, options, callback);
        };
        GetDelegateKeyByEth: GrpcUnaryServiceInterface<QueryDelegateKeysByEthAddress, QueryDelegateKeysByEthAddressResponse> = (message: QueryDelegateKeysByEthAddress, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<QueryDelegateKeysByEthAddressResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<QueryDelegateKeysByEthAddressResponse>, callback?: grpc_1.requestCallback<QueryDelegateKeysByEthAddressResponse>): grpc_1.ClientUnaryCall => {
            return super.GetDelegateKeyByEth(message, metadata, options, callback);
        };
        GetDelegateKeyByOrchestrator: GrpcUnaryServiceInterface<QueryDelegateKeysByOrchestratorAddress, QueryDelegateKeysByOrchestratorAddressResponse> = (message: QueryDelegateKeysByOrchestratorAddress, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<QueryDelegateKeysByOrchestratorAddressResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<QueryDelegateKeysByOrchestratorAddressResponse>, callback?: grpc_1.requestCallback<QueryDelegateKeysByOrchestratorAddressResponse>): grpc_1.ClientUnaryCall => {
            return super.GetDelegateKeyByOrchestrator(message, metadata, options, callback);
        };
        GetPendingSendToEth: GrpcUnaryServiceInterface<QueryPendingSendToEth, QueryPendingSendToEthResponse> = (message: QueryPendingSendToEth, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<QueryPendingSendToEthResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<QueryPendingSendToEthResponse>, callback?: grpc_1.requestCallback<QueryPendingSendToEthResponse>): grpc_1.ClientUnaryCall => {
            return super.GetPendingSendToEth(message, metadata, options, callback);
        };
    }
}
