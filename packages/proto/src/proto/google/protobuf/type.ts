/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 4.25.1
 * source: google/protobuf/type.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./any";
import * as dependency_2 from "./source_context";
import * as pb_1 from "google-protobuf";
export namespace google.protobuf {
    export enum Syntax {
        SYNTAX_PROTO2 = 0,
        SYNTAX_PROTO3 = 1,
        SYNTAX_EDITIONS = 2
    }
    export class Type extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            name?: string;
            fields?: Field[];
            oneofs?: string[];
            options?: Option[];
            source_context?: dependency_2.google.protobuf.SourceContext;
            syntax?: Syntax;
            edition?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2, 3, 4], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("fields" in data && data.fields != undefined) {
                    this.fields = data.fields;
                }
                if ("oneofs" in data && data.oneofs != undefined) {
                    this.oneofs = data.oneofs;
                }
                if ("options" in data && data.options != undefined) {
                    this.options = data.options;
                }
                if ("source_context" in data && data.source_context != undefined) {
                    this.source_context = data.source_context;
                }
                if ("syntax" in data && data.syntax != undefined) {
                    this.syntax = data.syntax;
                }
                if ("edition" in data && data.edition != undefined) {
                    this.edition = data.edition;
                }
            }
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get fields() {
            return pb_1.Message.getRepeatedWrapperField(this, Field, 2) as Field[];
        }
        set fields(value: Field[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        get oneofs() {
            return pb_1.Message.getFieldWithDefault(this, 3, []) as string[];
        }
        set oneofs(value: string[]) {
            pb_1.Message.setField(this, 3, value);
        }
        get options() {
            return pb_1.Message.getRepeatedWrapperField(this, Option, 4) as Option[];
        }
        set options(value: Option[]) {
            pb_1.Message.setRepeatedWrapperField(this, 4, value);
        }
        get source_context() {
            return pb_1.Message.getWrapperField(this, dependency_2.google.protobuf.SourceContext, 5) as dependency_2.google.protobuf.SourceContext;
        }
        set source_context(value: dependency_2.google.protobuf.SourceContext) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get has_source_context() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get syntax() {
            return pb_1.Message.getFieldWithDefault(this, 6, Syntax.SYNTAX_PROTO2) as Syntax;
        }
        set syntax(value: Syntax) {
            pb_1.Message.setField(this, 6, value);
        }
        get edition() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set edition(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        static fromObject(data: {
            name?: string;
            fields?: ReturnType<typeof Field.prototype.toObject>[];
            oneofs?: string[];
            options?: ReturnType<typeof Option.prototype.toObject>[];
            source_context?: ReturnType<typeof dependency_2.google.protobuf.SourceContext.prototype.toObject>;
            syntax?: Syntax;
            edition?: string;
        }): Type {
            const message = new Type({});
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.fields != null) {
                message.fields = data.fields.map(item => Field.fromObject(item));
            }
            if (data.oneofs != null) {
                message.oneofs = data.oneofs;
            }
            if (data.options != null) {
                message.options = data.options.map(item => Option.fromObject(item));
            }
            if (data.source_context != null) {
                message.source_context = dependency_2.google.protobuf.SourceContext.fromObject(data.source_context);
            }
            if (data.syntax != null) {
                message.syntax = data.syntax;
            }
            if (data.edition != null) {
                message.edition = data.edition;
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
                fields?: ReturnType<typeof Field.prototype.toObject>[];
                oneofs?: string[];
                options?: ReturnType<typeof Option.prototype.toObject>[];
                source_context?: ReturnType<typeof dependency_2.google.protobuf.SourceContext.prototype.toObject>;
                syntax?: Syntax;
                edition?: string;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.fields != null) {
                data.fields = this.fields.map((item: Field) => item.toObject());
            }
            if (this.oneofs != null) {
                data.oneofs = this.oneofs;
            }
            if (this.options != null) {
                data.options = this.options.map((item: Option) => item.toObject());
            }
            if (this.source_context != null) {
                data.source_context = this.source_context.toObject();
            }
            if (this.syntax != null) {
                data.syntax = this.syntax;
            }
            if (this.edition != null) {
                data.edition = this.edition;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length)
                writer.writeString(1, this.name);
            if (this.fields.length)
                writer.writeRepeatedMessage(2, this.fields, (item: Field) => item.serialize(writer));
            if (this.oneofs.length)
                writer.writeRepeatedString(3, this.oneofs);
            if (this.options.length)
                writer.writeRepeatedMessage(4, this.options, (item: Option) => item.serialize(writer));
            if (this.has_source_context)
                writer.writeMessage(5, this.source_context, () => this.source_context.serialize(writer));
            if (this.syntax != Syntax.SYNTAX_PROTO2)
                writer.writeEnum(6, this.syntax);
            if (this.edition.length)
                writer.writeString(7, this.edition);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Type {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Type();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.fields, () => pb_1.Message.addToRepeatedWrapperField(message, 2, Field.deserialize(reader), Field));
                        break;
                    case 3:
                        pb_1.Message.addToRepeatedField(message, 3, reader.readString());
                        break;
                    case 4:
                        reader.readMessage(message.options, () => pb_1.Message.addToRepeatedWrapperField(message, 4, Option.deserialize(reader), Option));
                        break;
                    case 5:
                        reader.readMessage(message.source_context, () => message.source_context = dependency_2.google.protobuf.SourceContext.deserialize(reader));
                        break;
                    case 6:
                        message.syntax = reader.readEnum();
                        break;
                    case 7:
                        message.edition = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Type {
            return Type.deserialize(bytes);
        }
    }
    export class Field extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            kind?: Field.Kind;
            cardinality?: Field.Cardinality;
            number?: number;
            name?: string;
            type_url?: string;
            oneof_index?: number;
            packed?: boolean;
            options?: Option[];
            json_name?: string;
            default_value?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [9], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("kind" in data && data.kind != undefined) {
                    this.kind = data.kind;
                }
                if ("cardinality" in data && data.cardinality != undefined) {
                    this.cardinality = data.cardinality;
                }
                if ("number" in data && data.number != undefined) {
                    this.number = data.number;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("type_url" in data && data.type_url != undefined) {
                    this.type_url = data.type_url;
                }
                if ("oneof_index" in data && data.oneof_index != undefined) {
                    this.oneof_index = data.oneof_index;
                }
                if ("packed" in data && data.packed != undefined) {
                    this.packed = data.packed;
                }
                if ("options" in data && data.options != undefined) {
                    this.options = data.options;
                }
                if ("json_name" in data && data.json_name != undefined) {
                    this.json_name = data.json_name;
                }
                if ("default_value" in data && data.default_value != undefined) {
                    this.default_value = data.default_value;
                }
            }
        }
        get kind() {
            return pb_1.Message.getFieldWithDefault(this, 1, Field.Kind.TYPE_UNKNOWN) as Field.Kind;
        }
        set kind(value: Field.Kind) {
            pb_1.Message.setField(this, 1, value);
        }
        get cardinality() {
            return pb_1.Message.getFieldWithDefault(this, 2, Field.Cardinality.CARDINALITY_UNKNOWN) as Field.Cardinality;
        }
        set cardinality(value: Field.Cardinality) {
            pb_1.Message.setField(this, 2, value);
        }
        get number() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set number(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get type_url() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set type_url(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get oneof_index() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set oneof_index(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        get packed() {
            return pb_1.Message.getFieldWithDefault(this, 8, false) as boolean;
        }
        set packed(value: boolean) {
            pb_1.Message.setField(this, 8, value);
        }
        get options() {
            return pb_1.Message.getRepeatedWrapperField(this, Option, 9) as Option[];
        }
        set options(value: Option[]) {
            pb_1.Message.setRepeatedWrapperField(this, 9, value);
        }
        get json_name() {
            return pb_1.Message.getFieldWithDefault(this, 10, "") as string;
        }
        set json_name(value: string) {
            pb_1.Message.setField(this, 10, value);
        }
        get default_value() {
            return pb_1.Message.getFieldWithDefault(this, 11, "") as string;
        }
        set default_value(value: string) {
            pb_1.Message.setField(this, 11, value);
        }
        static fromObject(data: {
            kind?: Field.Kind;
            cardinality?: Field.Cardinality;
            number?: number;
            name?: string;
            type_url?: string;
            oneof_index?: number;
            packed?: boolean;
            options?: ReturnType<typeof Option.prototype.toObject>[];
            json_name?: string;
            default_value?: string;
        }): Field {
            const message = new Field({});
            if (data.kind != null) {
                message.kind = data.kind;
            }
            if (data.cardinality != null) {
                message.cardinality = data.cardinality;
            }
            if (data.number != null) {
                message.number = data.number;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.type_url != null) {
                message.type_url = data.type_url;
            }
            if (data.oneof_index != null) {
                message.oneof_index = data.oneof_index;
            }
            if (data.packed != null) {
                message.packed = data.packed;
            }
            if (data.options != null) {
                message.options = data.options.map(item => Option.fromObject(item));
            }
            if (data.json_name != null) {
                message.json_name = data.json_name;
            }
            if (data.default_value != null) {
                message.default_value = data.default_value;
            }
            return message;
        }
        toObject() {
            const data: {
                kind?: Field.Kind;
                cardinality?: Field.Cardinality;
                number?: number;
                name?: string;
                type_url?: string;
                oneof_index?: number;
                packed?: boolean;
                options?: ReturnType<typeof Option.prototype.toObject>[];
                json_name?: string;
                default_value?: string;
            } = {};
            if (this.kind != null) {
                data.kind = this.kind;
            }
            if (this.cardinality != null) {
                data.cardinality = this.cardinality;
            }
            if (this.number != null) {
                data.number = this.number;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.type_url != null) {
                data.type_url = this.type_url;
            }
            if (this.oneof_index != null) {
                data.oneof_index = this.oneof_index;
            }
            if (this.packed != null) {
                data.packed = this.packed;
            }
            if (this.options != null) {
                data.options = this.options.map((item: Option) => item.toObject());
            }
            if (this.json_name != null) {
                data.json_name = this.json_name;
            }
            if (this.default_value != null) {
                data.default_value = this.default_value;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.kind != Field.Kind.TYPE_UNKNOWN)
                writer.writeEnum(1, this.kind);
            if (this.cardinality != Field.Cardinality.CARDINALITY_UNKNOWN)
                writer.writeEnum(2, this.cardinality);
            if (this.number != 0)
                writer.writeInt32(3, this.number);
            if (this.name.length)
                writer.writeString(4, this.name);
            if (this.type_url.length)
                writer.writeString(6, this.type_url);
            if (this.oneof_index != 0)
                writer.writeInt32(7, this.oneof_index);
            if (this.packed != false)
                writer.writeBool(8, this.packed);
            if (this.options.length)
                writer.writeRepeatedMessage(9, this.options, (item: Option) => item.serialize(writer));
            if (this.json_name.length)
                writer.writeString(10, this.json_name);
            if (this.default_value.length)
                writer.writeString(11, this.default_value);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Field {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Field();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.kind = reader.readEnum();
                        break;
                    case 2:
                        message.cardinality = reader.readEnum();
                        break;
                    case 3:
                        message.number = reader.readInt32();
                        break;
                    case 4:
                        message.name = reader.readString();
                        break;
                    case 6:
                        message.type_url = reader.readString();
                        break;
                    case 7:
                        message.oneof_index = reader.readInt32();
                        break;
                    case 8:
                        message.packed = reader.readBool();
                        break;
                    case 9:
                        reader.readMessage(message.options, () => pb_1.Message.addToRepeatedWrapperField(message, 9, Option.deserialize(reader), Option));
                        break;
                    case 10:
                        message.json_name = reader.readString();
                        break;
                    case 11:
                        message.default_value = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Field {
            return Field.deserialize(bytes);
        }
    }
    export namespace Field {
        export enum Kind {
            TYPE_UNKNOWN = 0,
            TYPE_DOUBLE = 1,
            TYPE_FLOAT = 2,
            TYPE_INT64 = 3,
            TYPE_UINT64 = 4,
            TYPE_INT32 = 5,
            TYPE_FIXED64 = 6,
            TYPE_FIXED32 = 7,
            TYPE_BOOL = 8,
            TYPE_STRING = 9,
            TYPE_GROUP = 10,
            TYPE_MESSAGE = 11,
            TYPE_BYTES = 12,
            TYPE_UINT32 = 13,
            TYPE_ENUM = 14,
            TYPE_SFIXED32 = 15,
            TYPE_SFIXED64 = 16,
            TYPE_SINT32 = 17,
            TYPE_SINT64 = 18
        }
        export enum Cardinality {
            CARDINALITY_UNKNOWN = 0,
            CARDINALITY_OPTIONAL = 1,
            CARDINALITY_REQUIRED = 2,
            CARDINALITY_REPEATED = 3
        }
    }
    export class Enum extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            name?: string;
            enumvalue?: EnumValue[];
            options?: Option[];
            source_context?: dependency_2.google.protobuf.SourceContext;
            syntax?: Syntax;
            edition?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2, 3], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("enumvalue" in data && data.enumvalue != undefined) {
                    this.enumvalue = data.enumvalue;
                }
                if ("options" in data && data.options != undefined) {
                    this.options = data.options;
                }
                if ("source_context" in data && data.source_context != undefined) {
                    this.source_context = data.source_context;
                }
                if ("syntax" in data && data.syntax != undefined) {
                    this.syntax = data.syntax;
                }
                if ("edition" in data && data.edition != undefined) {
                    this.edition = data.edition;
                }
            }
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get enumvalue() {
            return pb_1.Message.getRepeatedWrapperField(this, EnumValue, 2) as EnumValue[];
        }
        set enumvalue(value: EnumValue[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        get options() {
            return pb_1.Message.getRepeatedWrapperField(this, Option, 3) as Option[];
        }
        set options(value: Option[]) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        get source_context() {
            return pb_1.Message.getWrapperField(this, dependency_2.google.protobuf.SourceContext, 4) as dependency_2.google.protobuf.SourceContext;
        }
        set source_context(value: dependency_2.google.protobuf.SourceContext) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_source_context() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get syntax() {
            return pb_1.Message.getFieldWithDefault(this, 5, Syntax.SYNTAX_PROTO2) as Syntax;
        }
        set syntax(value: Syntax) {
            pb_1.Message.setField(this, 5, value);
        }
        get edition() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set edition(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        static fromObject(data: {
            name?: string;
            enumvalue?: ReturnType<typeof EnumValue.prototype.toObject>[];
            options?: ReturnType<typeof Option.prototype.toObject>[];
            source_context?: ReturnType<typeof dependency_2.google.protobuf.SourceContext.prototype.toObject>;
            syntax?: Syntax;
            edition?: string;
        }): Enum {
            const message = new Enum({});
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.enumvalue != null) {
                message.enumvalue = data.enumvalue.map(item => EnumValue.fromObject(item));
            }
            if (data.options != null) {
                message.options = data.options.map(item => Option.fromObject(item));
            }
            if (data.source_context != null) {
                message.source_context = dependency_2.google.protobuf.SourceContext.fromObject(data.source_context);
            }
            if (data.syntax != null) {
                message.syntax = data.syntax;
            }
            if (data.edition != null) {
                message.edition = data.edition;
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
                enumvalue?: ReturnType<typeof EnumValue.prototype.toObject>[];
                options?: ReturnType<typeof Option.prototype.toObject>[];
                source_context?: ReturnType<typeof dependency_2.google.protobuf.SourceContext.prototype.toObject>;
                syntax?: Syntax;
                edition?: string;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.enumvalue != null) {
                data.enumvalue = this.enumvalue.map((item: EnumValue) => item.toObject());
            }
            if (this.options != null) {
                data.options = this.options.map((item: Option) => item.toObject());
            }
            if (this.source_context != null) {
                data.source_context = this.source_context.toObject();
            }
            if (this.syntax != null) {
                data.syntax = this.syntax;
            }
            if (this.edition != null) {
                data.edition = this.edition;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length)
                writer.writeString(1, this.name);
            if (this.enumvalue.length)
                writer.writeRepeatedMessage(2, this.enumvalue, (item: EnumValue) => item.serialize(writer));
            if (this.options.length)
                writer.writeRepeatedMessage(3, this.options, (item: Option) => item.serialize(writer));
            if (this.has_source_context)
                writer.writeMessage(4, this.source_context, () => this.source_context.serialize(writer));
            if (this.syntax != Syntax.SYNTAX_PROTO2)
                writer.writeEnum(5, this.syntax);
            if (this.edition.length)
                writer.writeString(6, this.edition);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Enum {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Enum();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.enumvalue, () => pb_1.Message.addToRepeatedWrapperField(message, 2, EnumValue.deserialize(reader), EnumValue));
                        break;
                    case 3:
                        reader.readMessage(message.options, () => pb_1.Message.addToRepeatedWrapperField(message, 3, Option.deserialize(reader), Option));
                        break;
                    case 4:
                        reader.readMessage(message.source_context, () => message.source_context = dependency_2.google.protobuf.SourceContext.deserialize(reader));
                        break;
                    case 5:
                        message.syntax = reader.readEnum();
                        break;
                    case 6:
                        message.edition = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Enum {
            return Enum.deserialize(bytes);
        }
    }
    export class EnumValue extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            name?: string;
            number?: number;
            options?: Option[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("number" in data && data.number != undefined) {
                    this.number = data.number;
                }
                if ("options" in data && data.options != undefined) {
                    this.options = data.options;
                }
            }
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get number() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set number(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get options() {
            return pb_1.Message.getRepeatedWrapperField(this, Option, 3) as Option[];
        }
        set options(value: Option[]) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        static fromObject(data: {
            name?: string;
            number?: number;
            options?: ReturnType<typeof Option.prototype.toObject>[];
        }): EnumValue {
            const message = new EnumValue({});
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.number != null) {
                message.number = data.number;
            }
            if (data.options != null) {
                message.options = data.options.map(item => Option.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
                number?: number;
                options?: ReturnType<typeof Option.prototype.toObject>[];
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.number != null) {
                data.number = this.number;
            }
            if (this.options != null) {
                data.options = this.options.map((item: Option) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length)
                writer.writeString(1, this.name);
            if (this.number != 0)
                writer.writeInt32(2, this.number);
            if (this.options.length)
                writer.writeRepeatedMessage(3, this.options, (item: Option) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): EnumValue {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new EnumValue();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 2:
                        message.number = reader.readInt32();
                        break;
                    case 3:
                        reader.readMessage(message.options, () => pb_1.Message.addToRepeatedWrapperField(message, 3, Option.deserialize(reader), Option));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): EnumValue {
            return EnumValue.deserialize(bytes);
        }
    }
    export class Option extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            name?: string;
            value?: dependency_1.google.protobuf.Any;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("value" in data && data.value != undefined) {
                    this.value = data.value;
                }
            }
        }
        get name() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get value() {
            return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Any, 2) as dependency_1.google.protobuf.Any;
        }
        set value(value: dependency_1.google.protobuf.Any) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_value() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            name?: string;
            value?: ReturnType<typeof dependency_1.google.protobuf.Any.prototype.toObject>;
        }): Option {
            const message = new Option({});
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.value != null) {
                message.value = dependency_1.google.protobuf.Any.fromObject(data.value);
            }
            return message;
        }
        toObject() {
            const data: {
                name?: string;
                value?: ReturnType<typeof dependency_1.google.protobuf.Any.prototype.toObject>;
            } = {};
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.value != null) {
                data.value = this.value.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.name.length)
                writer.writeString(1, this.name);
            if (this.has_value)
                writer.writeMessage(2, this.value, () => this.value.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Option {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Option();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.name = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.value, () => message.value = dependency_1.google.protobuf.Any.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Option {
            return Option.deserialize(bytes);
        }
    }
}
